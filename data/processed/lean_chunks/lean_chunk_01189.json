{
  "content": "theorem ex1 (p q : Nat) : p \u2264 q \u2228 p > q := by\n  cases p, q using elimEx with\n  | diag    => apply Or.inl; apply Nat.le_refl\n  | lower d => apply Or.inl; show p \u2264 p + d.succ; admit\n  | upper d => apply Or.inr; show q + d.succ > q; admit\ntheorem ex2 (p q : Nat) : p \u2264 q \u2228 p > q := by\n  cases p, q using elimEx\n  case lower => admit\n  case upper => admit\n  case diag  => apply Or.inl; apply Nat.le_refl\naxiom Nat.parityElim (motive : Nat \u2192 Sort u)\n  (even : (n : Nat) \u2192 motive (2*n))\n  (odd  : (n : Nat) \u2192 motive (2*n+1))\n  (n : Nat)\n  : motive n\ntheorem time2Eq (n : Nat) : 2*n = n + n := by\n  rw [Nat.mul_comm]\n  show (0 + n) + n = n+n\n  simp\ntheorem ex3 (n : Nat) : Exists (fun m => n = m + m \u2228 n = m + m + 1) := by\n  cases n using Nat.parityElim with\n  | even i =>\n    apply Exists.intro i\n    apply Or.inl\n    rw [time2Eq]\n  | odd i =>\n    apply Exists.intro i\n    apply Or.inr\n    rw [time2Eq]\nopen Nat in\ntheorem ex3b (n : Nat) : Exists (fun m => n = m + m \u2228 n = m + m + 1) := by",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/lean/run/casesUsing.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/lean/run/casesUsing.lean",
    "definition_name": "ex1",
    "has_proof": true
  }
}