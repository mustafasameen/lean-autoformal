{
  "content": "modify (fun s => { s with var2val := s.var2val.insert x (ty, v) })\ndef addJpTostate (jp : JoinPointId) (bb : LLVM.BasicBlock llvmctx) : M llvmctx Unit :=\n  modify (fun s => { s with jp2bb := s.jp2bb.insert jp bb })\ndef emitJp (jp : JoinPointId) : M llvmctx (LLVM.BasicBlock llvmctx) := do\n  let state \u2190 get\n  match state.jp2bb[jp]? with\n  | .some bb => return bb\n  | .none => throw s!\"unable to find join point {jp}\"\ndef getLLVMModule : M llvmctx (LLVM.Module llvmctx) := Context.llvmmodule <$> read\ndef getEnv : M llvmctx Environment := Context.env <$> read\ndef getModName : M llvmctx  Name := Context.modName <$> read\ndef getDecl (n : Name) : M llvmctx Decl := do\n  let env \u2190 getEnv\n  match findEnvDecl env n with\n  | some d => pure d\n  | none   => throw s!\"unknown declaration {n}\"\ndef constInt8 (n : Nat) : M llvmctx (LLVM.Value llvmctx) :=  do\n    LLVM.constInt8 llvmctx (UInt64.ofNat n)\ndef constInt64 (n : Nat) : M llvmctx (LLVM.Value llvmctx) :=  do",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Compiler/IR/EmitLLVM.lean",
    "definition_type": "def",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Compiler/IR/EmitLLVM.lean",
    "definition_name": "leanMainFn"
  }
}