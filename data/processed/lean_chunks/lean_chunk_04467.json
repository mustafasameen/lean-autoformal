{
  "content": "theorem eq_none_iff_forall_not_mem : o = none \u2194 \u2200 a, a \u2209 o :=\n  \u27e8fun e a h => by rw [e] at h; (cases h), fun h => ext <| by simp; exact h\u27e9\ntheorem isSome_iff_exists : isSome x \u2194 \u2203 a, x = some a := by cases x <;> simp [isSome]\ntheorem isSome_eq_isSome : (isSome x = isSome y) \u2194 (x = none \u2194 y = none) := by\n  cases x <;> cases y <;> simp\n@[simp] theorem not_isSome : isSome a = false \u2194 a.isNone = true := by\n  cases a <;> simp\ntheorem eq_some_iff_get_eq : o = some a \u2194 \u2203 h : o.isSome, o.get h = a := by\n  cases o <;> simp\ntheorem eq_some_of_isSome : \u2200 {o : Option \u03b1}",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Option/Lemmas.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Option/Lemmas.lean",
    "definition_name": "eq_none_iff_forall_not_mem",
    "has_proof": true
  }
}