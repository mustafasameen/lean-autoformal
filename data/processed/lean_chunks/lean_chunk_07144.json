{
  "content": "@[inline, inherit_doc normFVarImp] def normFVar [MonadFVarSubst m t] [Monad m] (fvarId : FVarId) : m NormFVarResult :=\n  return normFVarImp (\u2190 getSubst) fvarId t\n@[inline, inherit_doc normExprImp] def normExpr [MonadFVarSubst m t] [Monad m] (e : Expr) : m Expr :=\n  return normExprImp (\u2190 getSubst) e t\n@[inline, inherit_doc normArgImp] def normArg [MonadFVarSubst m t] [Monad m] (arg : Arg) : m Arg :=\n  return normArgImp (\u2190 getSubst) arg t\n@[inline, inherit_doc normLetValueImp] def normLetValue [MonadFVarSubst m t] [Monad m] (e : LetValue) : m LetValue :=\n  return normLetValueImp (\u2190 getSubst) e t\n@[inherit_doc normExprImp]\nabbrev normExprCore (s : FVarSubst) (e : Expr) (translator : Bool) : Expr :=\n  normExprImp s e translator\ndef normArgs [MonadFVarSubst m t] [Monad m] (args : Array Arg) : m (Array Arg) :=\n  return normArgsImp (\u2190 getSubst) args t\ndef mkFreshBinderName (binderName := `_x): CompilerM Name := do\n  let declName := .num binderName (\u2190 get).nextIdx",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Compiler/LCNF/CompilerM.lean",
    "definition_type": "class",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Compiler/LCNF/CompilerM.lean",
    "definition_name": "MonadFVarSubst"
  }
}