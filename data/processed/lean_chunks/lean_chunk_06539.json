{
  "content": "| _ => none\npartial def combineIdents (trees : Array InfoTree) (refs : Array Reference) : Array Reference := Id.run do\n  let mut posMap : Std.HashMap Lsp.Range RefIdent := Std.HashMap.empty\n  for ref in refs do\n    if let { ident, range, isBinder := true, .. } := ref then\n      posMap := posMap.insert range ident\n  let idMap := useConstRepresentatives <| buildIdMap posMap\n  let mut refs' := #[]\n  for ref in refs do\n    let id := ref.ident\n    if idMap.contains id then\n      refs' := refs'.push { ref with ident := findCanonicalRepresentative idMap id, aliases := #[id] }\n    else if !idMap.contains id then\n      refs' := refs'.push ref\n  refs'\nwhere\n  useConstRepresentatives (idMap : Std.HashMap RefIdent RefIdent)\n      : Std.HashMap RefIdent RefIdent := Id.run do\n    let insertIntoClass classesById id :=\n      let representative := findCanonicalRepresentative idMap id\n      let \u00abclass\u00bb     := classesById.getD representative \u2205\nlet classesById := classesById.erase representative",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Server/References.lean",
    "definition_type": "def",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Server/References.lean",
    "definition_name": "ModuleRefs"
  }
}