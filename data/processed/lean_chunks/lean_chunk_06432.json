{
  "content": "let args := args.set! 1 arg1\n      return Syntax.node i k args\n    else if k == ``Parser.Term.liftMethod && !inQuot then withFreshMacroScope do\n      if inBinder then\n        throwErrorAt stx \"cannot lift `(<- ...)` over a binder, this error usually happens when you are trying to lift a method nested in a `fun`, `let`, or `match`-alternative, and it can often be fixed by adding a missing `do`\"\n      let term := args[1]!\n      let term \u2190 expandLiftMethodAux inQuot inBinder term\n      let id \u2190 mkIdentFromRef (.num baseId (\u2190 get).length)\n      let auxDoElem : Syntax \u2190 `(doElem| let $id:ident \u2190 $term:term)\n      modify fun s => s ++ [auxDoElem]\n      return id\n    else do\n      let inAntiquot := stx.isAntiquot && !stx.isEscapedAntiquot\n      let inBinder   := inBinder || (!inQuot && liftMethodForbiddenBinder stx)\n      let args \u2190 args.mapM (expandLiftMethodAux (inQuot && !inAntiquot || stx.isQuot) inBinder)\n      return Syntax.node i k args\n  | stx => return stx",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Elab/Do.lean",
    "definition_type": "structure",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Elab/Do.lean",
    "definition_name": "ToForInTermResult"
  }
}