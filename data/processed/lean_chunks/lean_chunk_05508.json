{
  "content": "foldlAux f s s.endPos 0 init\n@[specialize] def foldrAux {\u03b1 : Type u} (f : Char \u2192 \u03b1 \u2192 \u03b1) (a : \u03b1) (s : String) (i begPos : Pos) : \u03b1 :=\n  if h : begPos < i then\n    have := String.prev_lt_of_pos s i <| mt (congrArg String.Pos.byteIdx) <|\n      Ne.symm <| Nat.ne_of_lt <| Nat.lt_of_le_of_lt (Nat.zero_le _) h\n    let i := s.prev i\n    let a := f (s.get i) a\n    foldrAux f a s i begPos\n  else a\ntermination_by i.1\n@[inline] def foldr {\u03b1 : Type u} (f : Char \u2192 \u03b1 \u2192 \u03b1) (init : \u03b1) (s : String) : \u03b1 :=\n  foldrAux f init s s.endPos 0\n@[specialize] def anyAux (s : String) (stopPos : Pos) (p : Char \u2192 Bool) (i : Pos) : Bool :=\n  if h : i < stopPos then\n    if p (s.get i) then true\n    else\n      have := Nat.sub_lt_sub_left h (lt_next s i)\n      anyAux s stopPos p (s.next i)\n  else false\ntermination_by stopPos.1 - i.1\n@[inline] def any (s : String) (p : Char \u2192 Bool) : Bool :=\n  anyAux s s.endPos p 0\n@[inline] def all (s : String) (p : Char \u2192 Bool) : Bool :=\n  !s.any (fun c => !p c)",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/String/Basic.lean",
    "definition_type": "def",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/String/Basic.lean",
    "definition_name": "toString",
    "has_proof": true
  }
}