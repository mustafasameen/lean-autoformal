{
  "content": "unfold go at hgo\n  split at hgo\n  \u00b7 dsimp only at hgo\n    split at hgo\n    \u00b7 rw [\u2190 hgo]\n      intro idx h1 h2\n      rw [blastShiftRightConst.go_decl_eq]\n    \u00b7 rw [\u2190 hgo]\n      intro idx h1 h2\n      rw [blastShiftRightConst.go_decl_eq]\n      rw [AIG.LawfulOperator.decl_eq (f := AIG.mkConstCached)]\n      apply AIG.LawfulOperator.lt_size_of_lt_aig_size (f := AIG.mkConstCached)\n      assumption\n  \u00b7 simp [\u2190 hgo]\ntermination_by w - curr\ninstance : AIG.LawfulVecOperator \u03b1 AIG.ShiftTarget blastShiftRightConst where\n  le_size := by\n    intros\n    unfold blastShiftRightConst\n    apply blastShiftRightConst.go_le_size\n  decl_eq := by\n    intros\n    unfold blastShiftRightConst\n    apply blastShiftRightConst.go_decl_eq\ndef blastArithShiftRightConst (aig : AIG \u03b1) (target : AIG.ShiftTarget aig w) :\n    AIG.RefVecEntry \u03b1 w :=\n  let \u27e8input, distance\u27e9 := target\n  \u27e8aig, go input distance 0 (by omega) .empty\u27e9\nwhere\n  go {aig : AIG \u03b1}",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/ShiftRight.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/ShiftRight.lean",
    "definition_name": "blastShiftRightConst",
    "has_proof": true
  }
}