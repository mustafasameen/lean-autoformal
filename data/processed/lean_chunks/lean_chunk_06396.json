{
  "content": "else\n    let k := ``Lean.Parser.Category ++ k\n    if (\u2190 getEnv).contains k then\n      addTermInfo' stx (\u2190 mkConstWithFreshMVarLevels k)\ninstance : Quote Syntax.Preresolved where\n  quote\n    | .namespace ns => Unhygienic.run ``(Syntax.Preresolved.namespace $(quote ns))\n    | .decl n fs    => Unhygienic.run ``(Syntax.Preresolved.decl $(quote n) $(quote fs))\n  `(Bind.bind MonadRef.mkInfoFromRefPos (fun info =>\n      Bind.bind getCurrMacroScope (fun scp =>\n        Bind.bind getMainModule (fun mainModule => Pure.pure (@TSyntax.mk $(quote kind) $stx)))))\ndef stxQuot.expand (stx : Syntax) : TermElabM Syntax := do\n  let stx := if stx.getNumArgs == 1 then stx[0] else stx\n  let kind \u2190 getQuotKind stx\n  let stx \u2190 quoteSyntax stx.getQuotContent\n  mkSyntaxQuotation stx kind\nmacro \"elab_stx_quot\" kind:ident : command =>\n  `(@[builtin_term_elab $kind:ident] def elabQuot : TermElab := adaptExpander stxQuot.expand)\nelab_stx_quot Parser.Term.quot\nelab_stx_quot Parser.Tactic.quot",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Elab/Quotation.lean",
    "definition_type": "def",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Elab/Quotation.lean",
    "definition_name": "ArrayStxBuilder"
  }
}