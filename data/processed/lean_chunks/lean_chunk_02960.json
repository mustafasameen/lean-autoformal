{
  "content": "| _, _ => false\npartial def hasIdent (id : Name) : Syntax \u2192 Bool\n  | ident _ _ id' _ => id == id'\n  | node _ _ args   => args.any (hasIdent id)\n  | _               => false\n@[inline] def modifyArgs (stx : Syntax) (fn : Array Syntax \u2192 Array Syntax) : Syntax :=\n  match stx with\n  | node i k args => node i k (fn args)\n  | stx           => stx\n@[inline] def modifyArg (stx : Syntax) (i : Nat) (fn : Syntax \u2192 Syntax) : Syntax :=\n  match stx with\n  | node info k args => node info k (args.modify i fn)\n  | stx              => stx\n@[specialize] partial def replaceM {m : Type \u2192 Type} [Monad m] (fn : Syntax \u2192 m (Option Syntax)) : Syntax \u2192 m (Syntax)\n  | stx@(node info kind args) => do\n    match (\u2190 fn stx) with\n    | some stx => return stx\n    | none     => return node info kind (\u2190 args.mapM (replaceM fn))\n  | stx => do\n    let o \u2190 fn stx\n    return o.getD stx\n@[specialize] partial def rewriteBottomUpM {m : Type \u2192 Type} [Monad m] (fn : Syntax \u2192 m (Syntax)) : Syntax \u2192 m (Syntax)",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Syntax.lean",
    "definition_type": "def",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Syntax.lean",
    "definition_name": "SourceInfo"
  }
}