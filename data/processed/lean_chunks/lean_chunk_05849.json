{
  "content": "exact Nat.two_pow_pos j\n      simp only [hyp y y_lt_x]\n      if i_lt_j : i < j then\n        rw [Nat.add_comm _ (2^_), testBit_two_pow_add_gt i_lt_j]\n      else\n        simp [i_lt_j]\ntheorem testBit_one_zero : testBit 1 0 = true := by trivial\ntheorem not_decide_mod_two_eq_one (x : Nat)\n    : (!decide (x % 2 = 1)) = decide (x % 2 = 0) := by\n  cases Nat.mod_two_eq_zero_or_one x <;> (rename_i p; simp [p])\ntheorem testBit_two_pow_sub_succ (h\u2082 : x < 2 ^ n) (i : Nat) :\n    testBit (2^n - (x + 1)) i = (decide (i < n) && ! testBit x i) := by\n  induction i generalizing n x with\n  | zero =>\n    match n with\n    | 0 => simp [succ_sub_succ_eq_sub]\n    | n+1 =>\n      simp [not_decide_mod_two_eq_one]\n      omega\n  | succ i ih =>\n    simp only [testBit_succ]\n    match n with\n    | 0 =>\n      simp [decide_eq_false, succ_sub_succ_eq_sub]\n    | n+1 =>\n      rw [Nat.two_pow_succ_sub_succ_div_two, ih]\n      \u00b7 simp [Nat.succ_lt_succ_iff]\n      \u00b7 omega",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Nat/Bitwise/Lemmas.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Nat/Bitwise/Lemmas.lean",
    "definition_name": "testBit_mod_two_pow",
    "has_proof": true
  }
}