{
  "content": ". simp [evalList, h.1, EvalInformation.evalOp]\n        . simp [evalList, EvalInformation.evalOp]; rw [h.1, ctx.assoc.1, h.1 (evalList _ _ _)]\n    all_goals simp [insert_nonEmpty]\ntheorem Context.evalList_sort (ctx : Context \u03b1) (h : ContextInformation.isComm ctx) (e : List Nat) : evalList \u03b1 ctx (sort e) = evalList \u03b1 ctx e := by\n  have h : Commutative ctx.op := by\n    simp [ContextInformation.isComm, Option.isSome] at h\n    match h\u2082 : ctx.comm with\n    | none =>\n      simp [h\u2082] at h\n    | some val =>\n      simp [h\u2082] at h\n      exact val.down\n  induction e using List.two_step_induction with\n  | empty => rfl\n  | single => rfl\n  | step x y ys ih =>\n    simp [evalList_sort_cons ctx h]\n    cases h\u2082 : sort (y :: ys) with\n    | nil => simp [sort, sort.loop] at *; apply absurd h\u2082; apply sort_loop_nonEmpty; apply insert_nonEmpty\n    | cons z zs => simp [evalList, \u2190h\u2082, ih]\ntheorem Context.toList_nonEmpty (e : Expr) : e.toList \u2260 [] := by\n  induction e with\n  | var => simp [Expr.toList]",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/AC.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/AC.lean",
    "definition_name": "Context",
    "has_proof": true
  }
}