{
  "content": "inductive Expr where\n  | nat  : Nat \u2192 Expr\n  | plus : Expr \u2192 Expr \u2192 Expr\n  | bool : Bool \u2192 Expr\n  | and  : Expr \u2192 Expr \u2192 Expr\ninductive Ty where\n  | nat\n  | bool\n  deriving DecidableEq\ninductive HasType : Expr \u2192 Ty \u2192 Prop\n  | nat  : HasType (.nat v) .nat\n  | plus : HasType a .nat \u2192 HasType b .nat \u2192 HasType (.plus a b) .nat\n  | bool : HasType (.bool v) .bool\n  | and  : HasType a .bool \u2192 HasType b .bool \u2192 HasType (.and a b) .bool\ntheorem HasType.det (h\u2081 : HasType e t\u2081) (h\u2082 : HasType e t\u2082) : t\u2081 = t\u2082 := by\n  cases h\u2081 <;> cases h\u2082 <;> rfl\ninductive Maybe (p : \u03b1 \u2192 Prop) where\n  | found : (a : \u03b1) \u2192 p a \u2192 Maybe p\n  | unknown\nnotation \"{{ \" x \" | \" p \" }",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/doc/examples/tc.lean",
    "definition_type": "inductive",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/doc/examples/tc.lean",
    "definition_name": "Expr",
    "has_proof": true
  }
}