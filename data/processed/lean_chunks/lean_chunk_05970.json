{
  "content": "theorem mem_merge_left (s : \u03b1 \u2192 \u03b1 \u2192 Bool) (h : x \u2208 l) : x \u2208 merge l r s :=\n  mem_merge.2 <| .inl h\ntheorem mem_merge_right (s : \u03b1 \u2192 \u03b1 \u2192 Bool) (h : x \u2208 r) : x \u2208 merge l r s :=\n  mem_merge.2 <| .inr h\ntheorem merge_stable : \u2200 (xs ys) (_ : \u2200 x y, x \u2208 xs \u2192 y \u2208 ys \u2192 x.2 \u2264 y.2),\n    (merge xs ys (zipIdxLE le)).map (\u00b7.1) = merge (xs.map (\u00b7.1)) (ys.map (\u00b7.1)) le\n  | [], ys, _ => by simp [merge]\n  | xs, [], _ => by simp [merge]\n  | (i, x) :: xs, (j, y) :: ys, h => by\n    simp only [merge, zipIdxLE, map_cons]\n    split <;> rename_i w\n    \u00b7 rw [if_pos (by simp [h _ _ (mem_cons_self ..) (mem_cons_self ..)])]\n      simp only [map_cons, cons.injEq, true_and]\n      rw [merge_stable, map_cons]\n      exact fun x' y' mx my => h x' y' (mem_cons_of_mem (i, x) mx) my\n    \u00b7 simp only [\u2193reduceIte, map_cons, cons.injEq, true_and, reduceCtorEq]\n      rw [merge_stable, map_cons]\n      exact fun x' y' mx my => h x' y' mx (mem_cons_of_mem (j, y) my)\nattribute [local instance] boolRelToRel\ntheorem sorted_merge",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/List/Sort/Lemmas.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/List/Sort/Lemmas.lean",
    "definition_name": "mem_merge_left",
    "has_proof": true
  }
}