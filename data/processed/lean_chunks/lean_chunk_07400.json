{
  "content": "have f_del_readyForRatAdd : ReadyForRatAdd (Formula.delete f ids) := readyForRatAdd_delete f ids f_readyForRatAdd\n  exact ih (delete f ids) f_del_readyForRupAdd f_del_readyForRatAdd restPrfWellFormed h p (limplies_delete p pf)\ntheorem lratCheckerSound [DecidableEq \u03b1] [Clause \u03b1 \u03b2] [Entails \u03b1 \u03c3] [Formula \u03b1 \u03b2 \u03c3] (f : \u03c3)\n    (f_readyForRupAdd : ReadyForRupAdd f) (f_readyForRatAdd : ReadyForRatAdd f)\n    (prf : List (Action \u03b2 \u03b1)) (prfWellFormed : \u2200 a : Action \u03b2 \u03b1, a \u2208 prf \u2192 WellFormedAction a) :\n    lratChecker f prf = success \u2192 Unsatisfiable \u03b1 f := by\n  induction prf generalizing f\n  \u00b7 unfold lratChecker\n    simp [false_implies]\n  \u00b7 next action restPrf ih =>\n    simp only [List.find?, List.mem_cons, forall_eq_or_imp] at prfWellFormed\n    rcases prfWellFormed with \u27e8actionWellFormed, restPrfWellFormed\u27e9\n    unfold lratChecker\n    split\n    \u00b7 intro h\n      exfalso\n      simp at h\n    \u00b7 next id rupHints restPrf' _ =>\n      simp [ite_eq_left_iff, Bool.not_eq_true]\n      intro rupAddSuccess",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Std/Tactic/BVDecide/LRAT/Internal/LRATCheckerSound.lean",
    "definition_type": "def",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Std/Tactic/BVDecide/LRAT/Internal/LRATCheckerSound.lean",
    "definition_name": "specialize",
    "has_proof": true
  }
}