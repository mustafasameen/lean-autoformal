{
  "content": "theorem zipWith_comm (f : \u03b1 \u2192 \u03b2 \u2192 \u03b3) :\n    \u2200 (as : List \u03b1) (bs : List \u03b2), zipWith f as bs = zipWith (fun b a => f a b) bs as\n  | [], _ => List.zipWith_nil_right.symm\n  | _ :: _, [] => rfl\n  | _ :: as, _ :: bs => congrArg _ (zipWith_comm f as bs)\ntheorem zipWith_comm_of_comm (f : \u03b1 \u2192 \u03b1 \u2192 \u03b2) (comm : \u2200 x y : \u03b1, f x y = f y x) (l l' : List \u03b1) :\n    zipWith f l l' = zipWith f l' l := by\n  rw [zipWith_comm]\n  simp only [comm]\n@[simp]\ntheorem zipWith_self (f : \u03b1 \u2192 \u03b1 \u2192 \u03b4) : \u2200 l : List \u03b1, zipWith f l l = l.map fun a => f a a\n  | [] => rfl\n  | _ :: xs => congrArg _ (zipWith_self f xs)\n@[deprecated zipWith_self (since := \"2025-01-29\")] abbrev zipWith_same := @zipWith_self\ntheorem getElem?_zipWith {f : \u03b1 \u2192 \u03b2 \u2192 \u03b3}",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/List/Zip.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/List/Zip.lean",
    "definition_name": "zipWith_comm",
    "has_proof": true
  }
}