{
  "content": "theorem go_le_size (expr : BoolExpr \u03b1) (aig : AIG \u03b2) :\n    aig.decls.size \u2264 (ofBoolExprCached.go aig expr atomHandler).val.aig.decls.size :=\n  (ofBoolExprCached.go aig expr atomHandler).property\ntheorem go_decl_eq (idx) (aig : AIG \u03b2) (h : idx < aig.decls.size) (hbounds) :\n    (ofBoolExprCached.go aig expr atomHandler).val.aig.decls[idx]'hbounds = aig.decls[idx] := by\n  induction expr generalizing aig with\n  | const =>\n    simp only [go]\n    rw [AIG.LawfulOperator.decl_eq (f := mkConstCached)]\n  | literal =>\n    simp only [go]\n    rw [AIG.LawfulOperator.decl_eq (f := atomHandler)]\n  | not expr ih =>\n    simp only [go]\n    have := go_le_size atomHandler expr aig\n    specialize ih aig (by omega) (by omega)\n    rw [AIG.LawfulOperator.decl_eq (f := mkNotCached)]\n    assumption\n  | ite discr lhs rhs dih lih rih =>\n    have := go_le_size atomHandler discr aig\n    have := go_le_size atomHandler lhs (go aig discr atomHandler).val.aig",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Std/Tactic/BVDecide/Bitblast/BoolExpr/Circuit.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Std/Tactic/BVDecide/Bitblast/BoolExpr/Circuit.lean",
    "definition_name": "go_le_size",
    "has_proof": true
  }
}