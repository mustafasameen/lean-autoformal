{
  "content": "omit [MonoBind m] in\n@[partial_fixpoint_monotone]\ntheorem monotone_getDM (o : Option \u03b1) (y : \u03b3 \u2192 m \u03b1) (hmono : monotone y) :\n    monotone (fun x => o.getDM (y x)) := by\n  cases o\n  \u00b7 apply hmono\n  \u00b7 apply monotone_const\nend Option\nnamespace List\n@[partial_fixpoint_monotone]\ntheorem monotone_mapM (f : \u03b3 \u2192 \u03b1 \u2192 m \u03b2) (xs : List \u03b1) (hmono : monotone f) :\n    monotone (fun x => xs.mapM (f x)) := by\n  cases xs with\n  | nil => apply monotone_const\n  | cons _ xs =>\n    apply monotone_bind\n    \u00b7 apply monotone_apply\n      apply hmono\n    \u00b7 apply monotone_of_monotone_apply\n      intro y\n      dsimp\n      generalize [y] = ys\n      induction xs generalizing ys with\n      | nil => apply monotone_const\n      | cons _ _ ih =>\n        apply monotone_bind\n        \u00b7 apply monotone_apply\n          apply hmono\n        \u00b7 apply monotone_of_monotone_apply\n          intro y\n          apply ih\n@[partial_fixpoint_monotone]\ntheorem monotone_forM (f : \u03b3 \u2192 \u03b1 \u2192 m PUnit) (xs : List \u03b1) (hmono : monotone f) :",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Internal/Order/Lemmas.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Internal/Order/Lemmas.lean",
    "definition_name": "Functor",
    "has_proof": true
  }
}