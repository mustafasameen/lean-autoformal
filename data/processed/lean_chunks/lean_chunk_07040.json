{
  "content": "(expectedType?     : Option Expr)\n    : CancellableM (Array CompletionItem) :=\n  runM params completionInfoPos ctx lctx do\n    let some expectedType := expectedType?\n      | return ()\n    let resultTypeFn := (\u2190 instantiateMVars expectedType).cleanupAnnotations.getAppFn.cleanupAnnotations\n    let .const .. := resultTypeFn\n      | return ()\n    let nameSet \u2190 try\n      getDotCompletionTypeNames resultTypeFn\n    catch _ =>\n      pure RBTree.empty\n    forEligibleDeclsWithCancellationM fun declName c => do\n      let unnormedTypeName := declName.getPrefix\n      if ! nameSet.contains unnormedTypeName then\n        return\n      let some declName \u2190 normPrivateName? declName\n        | return\n      let typeName := declName.getPrefix\n      if ! (\u2190 isDotIdCompletionMethod typeName c) then\n        return\n      let completionKind \u2190 getCompletionKindForDecl c\n      if id.isAnonymous then\n        addUnresolvedCompletionItem (.mkSimple c.name.getString!) (.const c.name) completionKind\n        return",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Server/Completion/CompletionCollectors.lean",
    "definition_type": "def",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Server/Completion/CompletionCollectors.lean",
    "definition_name": "NameSetModPrivate"
  }
}