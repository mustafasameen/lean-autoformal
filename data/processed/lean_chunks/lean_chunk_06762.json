{
  "content": "if let (some mvarId', _) \u2190 simpTarget mvarId ctx {} (\u2190 mvarId.withContext <| mkDischarge? useDecide) (mayCloseGoal := false) then\n    return mvarId'\n  else\n    unreachable!\ndef simpIfLocalDecl (mvarId : MVarId) (fvarId : FVarId) : MetaM MVarId := do\n  let mut ctx \u2190 getSimpContext\n  if let (some (_, mvarId'), _) \u2190 simpLocalDecl mvarId fvarId ctx {} (\u2190 mvarId.withContext <| mkDischarge?) (mayCloseGoal := false) then\n    return mvarId'\n  else\n    unreachable!\ndef splitIfTarget? (mvarId : MVarId) (hName? : Option Name := none) : MetaM (Option (ByCasesSubgoal \u00d7 ByCasesSubgoal)) := commitWhenSome? do\n  if let some (s\u2081, s\u2082) \u2190 splitIfAt? mvarId (\u2190 mvarId.getType) hName? then\n    let mvarId\u2081 \u2190 simpIfTarget s\u2081.mvarId\n    let mvarId\u2082 \u2190 simpIfTarget s\u2082.mvarId\n    if s\u2081.mvarId == mvarId\u2081 && s\u2082.mvarId == mvarId\u2082 then\n      trace[split.failure] \"`split` tactic failed to simplify target using new hypotheses Goals:\\n{mvarId\u2081}\\n{mvarId\u2082}\"\n      return none\n    else",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Meta/Tactic/SplitIf.lean",
    "definition_type": "def",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Meta/Tactic/SplitIf.lean",
    "definition_name": "mkDischarge"
  }
}