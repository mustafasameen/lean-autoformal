{
  "content": "let constInfo \u2190 getConstInfo declName\n  let mut f \u2190 instantiateValueLevelParams constInfo declLevels\n  if (\u2190 getTransparency) matches .instances | .reducible then\n    f \u2190 unfoldNestedDIte f\n  let auxApp := mkAppN f args[0:prefixSz]\n  let auxAppType \u2190 inferType auxApp\n  forallBoundedTelescope auxAppType info.numAlts fun hs _ => do\n    let auxApp \u2190 whnfMatcher (mkAppN auxApp hs)\n    let auxAppFn := auxApp.getAppFn\n    let mut i := prefixSz\n    for h in hs do\n      if auxAppFn == h then\n        let result := mkAppN args[i]! auxApp.getAppArgs\n        let result := mkAppN result args[prefixSz + info.numAlts:args.size]\n        return ReduceMatcherResult.reduced result.headBeta\n      i := i + 1\n    return ReduceMatcherResult.stuck auxApp\ndef projectCore? (e : Expr) (i : Nat) : MetaM (Option Expr) := do\n  let e := e.toCtorIfLit\n  matchConstCtor e.getAppFn (fun _ => pure none) fun ctorVal _ =>\n    let numArgs := e.getAppNumArgs\n    let idx := ctorVal.numParams + i\n    if idx < numArgs then",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Meta/WHNF.lean",
    "definition_type": "def",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Meta/WHNF.lean",
    "definition_name": "smartUnfoldingSuffix"
  }
}