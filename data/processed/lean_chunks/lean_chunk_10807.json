{
  "content": "let traceFile := FilePath.mk <| file.toString ++ \".trace\"\n  buildUnlessUpToDate file (\u2190 getTrace) traceFile do\n    build\n    clearFileHash file\n  setTrace (\u2190 fetchFileTrace file text)\n@[deprecated buildFileUnlessUpToDate' (since := \"2024-12-06\")]\nabbrev buildFileUnlessUpToDate\n  (file : FilePath) (depTrace : BuildTrace) (build : JobM PUnit) (text := false)\n: JobM BuildTrace := do\n  setTrace depTrace\n  buildFileUnlessUpToDate' file build text\n  getTrace\n@[inline] def buildFileAfterDep\n  (file : FilePath) (dep : Job \u03b1) (build : \u03b1 \u2192 JobM PUnit)\n  (extraDepTrace : JobM _ := pure BuildTrace.nil) (text := false)\n: SpawnM (Job FilePath) :=\n  dep.mapM fun depInfo => do\n    addTrace (\u2190 extraDepTrace)\n    buildFileUnlessUpToDate' file (build depInfo) text\n    return file\n@[inline, deprecated buildFileAfterDep (since := \"2024-12-06\")]\nabbrev buildFileAfterDepList\n  (file : FilePath) (deps : List (Job \u03b1)) (build : List \u03b1 \u2192 JobM PUnit)",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/lake/Lake/Build/Common.lean",
    "definition_type": "def",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/lake/Lake/Build/Common.lean",
    "definition_name": "platformTrace"
  }
}