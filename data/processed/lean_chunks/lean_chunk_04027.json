{
  "content": "getLsbD (setWidth' ge x) i = getLsbD x i := by\n  simp [getLsbD, toNat_setWidth']\n@[simp] theorem getMsbD_setWidth' (ge : m \u2265 n) (x : BitVec n) (i : Nat) :\n    getMsbD (setWidth' ge x) i = (decide (m - n \u2264 i) && getMsbD x (i + n - m)) := by\n  simp only [getMsbD, getLsbD_setWidth', gt_iff_lt]\n  by_cases h\u2081 : decide (i < m) <;> by_cases h\u2082 : decide (m - n \u2264 i) <;> by_cases h\u2083 : decide (i + n - m < n) <;>\n    by_cases h\u2084 : n - 1 - (i + n - m) = m - 1 - i\n  all_goals\n    simp only [h\u2081, h\u2082, h\u2083, h\u2084]\n    simp_all only [ge_iff_le, decide_eq_true_eq, Nat.not_le, Nat.not_lt, Bool.true_and,\n      Bool.false_and, Bool.and_self] <;>\n    (try apply getLsbD_ge) <;>\n    (try apply (getLsbD_ge _ _ _).symm) <;>\n    omega\n@[simp] theorem getLsbD_setWidth (m : Nat) (x : BitVec n) (i : Nat) :\n    getLsbD (setWidth m x) i = (decide (i < m) && getLsbD x i) := by\n  simp [getLsbD, toNat_setWidth, Nat.testBit_mod_two_pow]\n@[simp] theorem getMsbD_setWidth {m : Nat}",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/BitVec/Lemmas.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/BitVec/Lemmas.lean",
    "definition_name": "getElem_setWidth",
    "has_proof": true
  }
}