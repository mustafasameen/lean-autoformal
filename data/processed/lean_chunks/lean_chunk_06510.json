{
  "content": "| ``Lean.Parser.Term.paren =>\n        let term := binder[1]\n        match (\u2190 getFunBinderIds? term) with\n        | some idents =>\n          if (\u2190 idents.allM fun ident => return List.isEmpty (\u2190 Macro.resolveGlobalName ident.getId)) then\n            loop body (i+1) (newBinders ++ idents.map (mkExplicitBinder \u00b7 (mkHole binder)))\n          else\n            processAsPattern ()\n        | none => processAsPattern ()\n      | ``Lean.Parser.Term.typeAscription =>\n        let term := binder[1]\n        let type := binder[3].getOptional?.getD (mkHole binder)\n        match (\u2190 getFunBinderIds? term) with\n        | some idents => loop body (i+1) (newBinders ++ idents.map (fun ident => mkExplicitBinder ident type))\n        | none        => processAsPattern ()\n      | _ => processAsPattern ()\n    else\n      pure (newBinders, body, false)\n  loop body 0 #[]\nnamespace FunBinders\nstructure State where\n  fvars         : Array Expr := #[]\n  lctx          : LocalContext\n  localInsts    : LocalInstances",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Elab/Binders.lean",
    "definition_type": "class",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Elab/Binders.lean",
    "definition_name": "instance"
  }
}