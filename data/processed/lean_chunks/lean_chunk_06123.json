{
  "content": "class LawfulFunctor (f : Type u \u2192 Type v) [Functor f] : Prop where\n  map_const          : (Functor.mapConst : \u03b1 \u2192 f \u03b2 \u2192 f \u03b1) = Functor.map \u2218 const \u03b2\n  id_map   (x : f \u03b1) : id <$> x = x\n  comp_map (g : \u03b1 \u2192 \u03b2) (h : \u03b2 \u2192 \u03b3) (x : f \u03b1) : (h \u2218 g) <$> x = h <$> g <$> x\nexport LawfulFunctor (map_const id_map comp_map)\nattribute [simp] id_map\n@[simp] theorem id_map' [Functor m] [LawfulFunctor m] (x : m \u03b1) : (fun a => a) <$> x = x :=\n  id_map x\n@[simp] theorem Functor.map_map [Functor f] [LawfulFunctor f] (m : \u03b1 \u2192 \u03b2) (g : \u03b2 \u2192 \u03b3) (x : f \u03b1) :\n    g <$> m <$> x = (fun a => g (m a)) <$> x :=\n  (comp_map _ _ _).symm\nclass LawfulApplicative (f : Type u \u2192 Type v) [Applicative f] : Prop extends LawfulFunctor f where\n  seqLeft_eq  (x : f \u03b1) (y : f \u03b2)     : x <* y = const \u03b2 <$> x <*> y\n  seqRight_eq (x : f \u03b1) (y : f \u03b2)     : x *> y = const \u03b1 id <$> x <*> y\n  pure_seq    (g : \u03b1 \u2192 \u03b2) (x : f \u03b1)   : pure g <*> x = g <$> x\n  map_pure    (g : \u03b1 \u2192 \u03b2) (x : \u03b1)     : g <$> (pure x : f \u03b1) = pure (g x)",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Control/Lawful/Basic.lean",
    "definition_type": "class",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Control/Lawful/Basic.lean",
    "definition_name": "LawfulFunctor",
    "has_proof": false
  }
}