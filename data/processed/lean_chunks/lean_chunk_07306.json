{
  "content": "| zeroExtend (v : Nat) (expr : BVExpr w) : BVExpr v\n  | extract (start len : Nat) (expr : BVExpr w) : BVExpr len\n  | bin (lhs : BVExpr w) (op : BVBinOp) (rhs : BVExpr w) : BVExpr w\n  | un (op : BVUnOp) (operand : BVExpr w) : BVExpr w\n  | append (lhs : BVExpr l) (rhs : BVExpr r) : BVExpr (l + r)\n  | replicate (n : Nat) (expr : BVExpr w) : BVExpr (w * n)\n  | signExtend (v : Nat) (expr : BVExpr w) : BVExpr v\n  | shiftLeft (lhs : BVExpr m) (rhs : BVExpr n) : BVExpr m\n  | shiftRight (lhs : BVExpr m) (rhs : BVExpr n) : BVExpr m\n  | arithShiftRight (lhs : BVExpr m) (rhs : BVExpr n) : BVExpr m\nnamespace BVExpr\ndef toString : BVExpr w \u2192 String\n  | .var idx => s!\"var{idx}",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.lean",
    "definition_name": "eval_not",
    "has_proof": true
  }
}