{
  "content": "addDeclarationRangesFromSyntax field.declName field.ref\n  return {\n    ref := stx\n    declId\n    modifiers\n    isClass\n    shortDeclName := name\n    declName\n    levelNames\n    binders\n    type?\n    allowIndices := false\n    allowSortPolymorphism := false\n    ctors := #[ctor]\n    parents\n    fields\n    computedFields := #[]\n    derivingClasses\n  }\nprivate def findFieldInfo? (infos : Array StructFieldInfo) (fieldName : Name) : Option StructFieldInfo :=\n  infos.find? fun info => info.name == fieldName\nprivate def containsFieldName (infos : Array StructFieldInfo) (fieldName : Name) : Bool :=\n  (findFieldInfo? infos fieldName).isSome\nprivate def replaceFieldInfo (infos : Array StructFieldInfo) (info : StructFieldInfo) : Array StructFieldInfo :=\n  infos.map fun info' =>\n    if info'.name == info.name then\n      info\n    else\n      info'\n        let declName := structDeclName ++ subfieldName",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Elab/Structure.lean",
    "definition_type": "def",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Elab/Structure.lean",
    "definition_name": "defaultCtorName"
  }
}