{
  "content": "theorem f_eq : f x = x + 2 := rfl\n@[my_simp] theorem g_eq : g x = x + 1 := rfl\nexample : f x + g x = 2*x + 3 := by\nfail_if_success simp +arith\n  simp +arith [f, g]\nexample : f x + g x = 2*x + 3 := by\n  simp +arith [my_simp]\nexample : f x = id (x + 2) := by\n  simp\n  simp [my_simp]\nmacro \"my_simp\" : tactic => `(tactic| simp [my_simp])\nexample : f x = id (x + 2) := by\n  my_simp\n@[simp low, my_simp low]\naxiom expand_mul_add (x y z : Nat) : x * (y + z) = x * y + x * y\n@[simp high, my_simp high]\naxiom expand_add_mul (x y z : Nat) : (x + y) * z = x * z + y * z\n@[simp, my_simp]\naxiom lassoc_add (x y z : Nat) : x + (y + z) = x + y + z\nset_option trace.Meta.Tactic.simp.rewrite true\ntheorem ex1 (x : Nat) : (x + x) * (x + x) = x * x + x * x + x * x + x * x := by simp only [my_simp]\ntheorem ex2 (x : Nat) : (x + x) * (x + x) = x * x + x * x + x * x + x * x := by simp\nopen Lean Meta in\ndef checkProofs : MetaM Unit := do\n  let .thmInfo info1 \u2190 getConstInfo `ex1 | throwError \"unexpected\"",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/pkg/user_attr/UserAttr/Tst.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/pkg/user_attr/UserAttr/Tst.lean",
    "definition_name": "f_eq",
    "has_proof": true
  }
}