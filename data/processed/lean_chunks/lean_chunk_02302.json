{
  "content": "inductive Foo\n| mk\u2081 (x y z w : Nat)\n| mk\u2082 (x y z w : Nat)\ndef Foo.z : Foo \u2192 Nat\n| mk\u2081 (z := z) .. => z\n| mk\u2082 (z := z) .. => z\n#eval checkWithMkMatcherInput ``Foo.z.match_1\n#guard (Foo.mk\u2081 10 20 30 40).z == 30\ntheorem ex7 : (Foo.mk\u2081 10 20 30 40).z = 30 :=\nrfl\ndef Foo.addY? : Foo \u00d7 Foo \u2192 Option Nat\n| (mk\u2081 (y := y\u2081) .., mk\u2081 (y := y\u2082) ..) => some (y\u2081 + y\u2082)\n| _ => none\n#eval checkWithMkMatcherInput ``Foo.addY?.match_1\n#guard Foo.addY? (Foo.mk\u2081 1 2 3 4, Foo.mk\u2081 10 20 30 40) == some 22\ntheorem ex8 : Foo.addY? (Foo.mk\u2081 1 2 3 4, Foo.mk\u2081 10 20 30 40) = some 22 :=\nrfl\ninstance {\u03b1}",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/lean/run/match1.lean",
    "definition_type": "inductive",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/lean/run/match1.lean",
    "definition_name": "Foo",
    "has_proof": false
  }
}