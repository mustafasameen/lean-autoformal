{
  "content": "theorem Stmt.simplify_correct (h : (\u03c3, s) \u21d3 \u03c3') : (\u03c3, s.simplify) \u21d3 \u03c3' := by\n  induction h with simp_all\n  | skip => exact Bigstep.skip\n  | seq h\u2081 h\u2082 ih\u2081 ih\u2082 => exact Bigstep.seq ih\u2081 ih\u2082\n  | assign => apply Bigstep.assign; simp [*]\n  | whileTrue heq h\u2081 h\u2082 ih\u2081 ih\u2082 =>\n    rw [\u2190 Expr.eval_simplify] at heq\n    split\n    next h => rw [h] at heq; simp at heq\n    next hnp => simp [hnp] at ih\u2082; apply Bigstep.whileTrue heq ih\u2081 ih\u2082\n  | whileFalse heq =>\n    split\n    next => exact Bigstep.skip\n    next => apply Bigstep.whileFalse; simp [heq]\n  | ifFalse heq h ih =>\n    rw [\u2190 Expr.eval_simplify] at heq\n    split <;> simp_all\n    rw [\u2190 Expr.eval_simplify] at heq\n    apply Bigstep.ifFalse heq ih\n  | ifTrue heq h ih =>\n    rw [\u2190 Expr.eval_simplify] at heq\n    split <;> simp_all\n    rw [\u2190 Expr.eval_simplify] at heq\n    apply Bigstep.ifTrue heq ih\n@[simp] def Expr.constProp (e : Expr) (\u03c3 : State) : Expr :=\n  match e with\n  | val v => v\n  | var x => match \u03c3.find? x with\n    | some v => val v",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/lean/run/constProp.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/lean/run/constProp.lean",
    "definition_name": "Stmt",
    "has_proof": true
  }
}