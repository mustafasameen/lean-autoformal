{
  "content": "| case7 k a k' h =>\n    simp only [toPoly.go, denote, mul_eq]\n    simp [h, eq_of_beq h]\n  | case8 k a k' h ih =>\n    simp only [toPoly.go, denote, mul_eq]\n    simp [h, cond_false, ih, Nat.mul_assoc]\ntheorem Expr.denote_toPoly (ctx : Context) (e : Expr) : e.toPoly.denote ctx = e.denote ctx := by\n  simp [toPoly, Expr.denote_toPoly_go]\nattribute [local simp] Expr.denote_toPoly\ntheorem Expr.eq_of_toNormPoly (ctx : Context) (a b : Expr) (h : a.toNormPoly = b.toNormPoly) : a.denote ctx = b.denote ctx := by\n  simp [toNormPoly, Poly.norm] at h\n  have h := congrArg (Poly.denote ctx) h\n  simp at h\n  assumption\ntheorem Expr.of_cancel_eq (ctx : Context) (a b c d : Expr) (h : Poly.cancel a.toNormPoly b.toNormPoly = (c.toPoly, d.toPoly)) : (a.denote ctx = b.denote ctx) = (c.denote ctx = d.denote ctx) := by\n  have := Poly.denote_eq_cancel_eq ctx a.toNormPoly b.toNormPoly\n  rw [h] at this\n  simp [toNormPoly, Poly.norm, Poly.denote_eq, -eq_iff_iff] at this\n  exact this.symm",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Nat/Linear.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Nat/Linear.lean",
    "definition_name": "Poly",
    "has_proof": true
  }
}