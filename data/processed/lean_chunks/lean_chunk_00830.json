{
  "content": "simp [denote_flat] at h\n  assumption\ndef Expr.length : Expr \u2192 Nat\n  | op a b => 1 + b.length\n  | _      => 1\ndef Expr.sort (e : Expr) : Expr :=\n  loop e.length e\nwhere\n  loop : Nat \u2192 Expr \u2192 Expr\n    | fuel+1, Expr.op a e =>\n      let (e\u2081, e\u2082) := swap a e\n      Expr.op e\u2081 (loop fuel e\u2082)\n    | _, e => e\n  swap : Expr \u2192 Expr \u2192 Expr \u00d7 Expr\n    | Expr.var i, Expr.op (Expr.var j) e =>\n      if i > j then\n        let (e\u2081, e\u2082) := swap (Expr.var j) e\n        (e\u2081, Expr.op (Expr.var i) e\u2082)\n      else\n        let (e\u2081, e\u2082) := swap (Expr.var i) e\n        (e\u2081, Expr.op (Expr.var j) e\u2082)\n    | Expr.var i, Expr.var j =>\n      if i > j then\n        (Expr.var j, Expr.var i)\n      else\n        (Expr.var i, Expr.var j)\n    | e\u2081, e\u2082 => (e\u2081, e\u2082)\ntheorem Expr.denote_sort (ctx : Context \u03b1) (e : Expr) : denote ctx (sort e) = denote ctx e := by\n  apply denote_loop\nwhere\n  denote_loop (n : Nat) (e : Expr) : denote ctx (sort.loop n e) = denote ctx e := by\n    induction n generalizing e with\n    | zero => rfl",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/lean/run/ac_expr.lean",
    "definition_type": "inductive",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/lean/run/ac_expr.lean",
    "definition_name": "Expr",
    "has_proof": true
  }
}