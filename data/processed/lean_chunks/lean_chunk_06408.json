{
  "content": "inductive declaration\"\n  if modifiers.isPartial then\n    throwError \"invalid use of 'partial' in inductive declaration\"\ndef checkValidCtorModifier [Monad m] [MonadError m] (modifiers : Modifiers) : m Unit := do\n  if modifiers.isNoncomputable then\n    throwError \"invalid use of 'noncomputable' in constructor declaration\"\n  if modifiers.isPartial then\n    throwError \"invalid use of 'partial' in constructor declaration\"\n  if modifiers.isUnsafe then\n    throwError \"invalid use of 'unsafe' in constructor declaration\"\n  if modifiers.attrs.size != 0 then\n    throwError \"invalid use of attributes in constructor declaration\"\nprivate def checkUnsafe (rs : Array PreElabHeaderResult) : TermElabM Unit := do\n  let isUnsafe := rs[0]!.view.modifiers.isUnsafe\n  for r in rs do\n    unless r.view.modifiers.isUnsafe == isUnsafe do\n      throwErrorAt r.view.ref \"invalid inductive type, cannot mix unsafe and safe declarations in a mutually inductive datatypes\"",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Elab/MutualInductive.lean",
    "definition_type": "inductive",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Elab/MutualInductive.lean",
    "definition_name": "declaration"
  }
}