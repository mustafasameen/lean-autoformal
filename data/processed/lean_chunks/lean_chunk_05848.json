{
  "content": "theorem testBit_mod_two_pow (x j i : Nat) :\n    testBit (x % 2^j) i = (decide (i < j) && testBit x i) := by\n  induction x using Nat.strongRecOn generalizing j i with\n  | ind x hyp =>\n    rw [mod_eq]\n    rcases Nat.lt_or_ge x (2^j) with x_lt_j | x_ge_j\n    \u00b7 have not_j_le_x := Nat.not_le_of_gt x_lt_j\n      simp [not_j_le_x]\n      rcases Nat.lt_or_ge i j with i_lt_j | i_ge_j\n      \u00b7 simp [i_lt_j]\n      \u00b7 have x_lt : x < 2^i :=\n            calc x < 2^j := x_lt_j\n                _ \u2264 2^i := Nat.pow_le_pow_right Nat.zero_lt_two i_ge_j\n        simp [Nat.testBit_lt_two_pow x_lt]\n    \u00b7 generalize y_eq : x - 2^j = y\n      have x_eq : x = y + 2^j := Nat.eq_add_of_sub_eq x_ge_j y_eq\n      simp only [Nat.two_pow_pos, x_eq, Nat.le_add_left, true_and, ite_true]\n      have y_lt_x : y < x := by\n        simp only [x_eq, Nat.lt_add_right_iff_pos]\n        exact Nat.two_pow_pos j\n      simp only [hyp y y_lt_x]\n      if i_lt_j : i < j then\n        rw [Nat.add_comm _ (2^_), testBit_two_pow_add_gt i_lt_j]",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Nat/Bitwise/Lemmas.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Nat/Bitwise/Lemmas.lean",
    "definition_name": "testBit_mod_two_pow",
    "has_proof": true
  }
}