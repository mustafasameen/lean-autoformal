{
  "content": "| .inr h\u2080 => induction p with\n    | zero => rw [Nat.mul_zero, Nat.sub_zero, Nat.sub_zero]\n    | succ p IH =>\n      have h\u2082 : n * p \u2264 x := Nat.le_trans (Nat.mul_le_mul_left _ (le_succ _)) h\u2081\n      have h\u2083 : x - n * p \u2265 n := by\n        apply Nat.le_of_add_le_add_right\n        rw [Nat.sub_add_cancel h\u2082, Nat.add_comm]\n        rw [mul_succ] at h\u2081\n        exact h\u2081\n      rw [sub_succ, \u2190 IH h\u2082, div_eq_sub_div h\u2080 h\u2083]\n      simp [Nat.pred_succ, mul_succ, Nat.sub_sub]\ntheorem mul_sub_div (x n p : Nat) (h\u2081 : x < n*p) : (n * p - (x + 1)) / n = p - ((x / n) + 1) := by\n  have npos : 0 < n := (eq_zero_or_pos _).resolve_left fun n0 => by\n    rw [n0, Nat.zero_mul] at h\u2081; exact not_lt_zero _ h\u2081\n  apply Nat.div_eq_of_lt_le\n  focus\n    rw [Nat.mul_sub_right_distrib, Nat.mul_comm]\n    exact Nat.sub_le_sub_left ((div_lt_iff_lt_mul npos).1 (lt_succ_self _)) _\n  focus\n    show succ (pred (n * p - x)) \u2264 (succ (pred (p - x / n))) * n\n    rw [succ_pred_eq_of_pos (Nat.sub_pos_of_lt h\u2081),",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Nat/Div/Basic.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Nat/Div/Basic.lean",
    "definition_name": "add_mod_right",
    "has_proof": true
  }
}