{
  "content": "withAppAux k e (mkArray nargs dummy) (nargs-1)\n@[inline] def getAppArgsN (e : Expr) (n : Nat) : Array Expr :=\n  let dummy := mkSort levelZero\n  loop n e (mkArray n dummy)\nwhere\n  loop : Nat \u2192 Expr \u2192 Array Expr \u2192 Array Expr\n    | 0,   _,        as => as\n    | i+1, .app f a, as => loop i f (as.set! i a)\n    | _,   _,        _  => panic! \"too few arguments at\"\ndef stripArgsN (e : Expr) (n : Nat) : Expr :=\n  match n, e with\n  | 0,   _        => e\n  | n+1, .app f _ => stripArgsN f n\n  | _,   _        => e\ndef getAppPrefix (e : Expr) (n : Nat) : Expr :=\n  e.stripArgsN (e.getAppNumArgs - n)\ndef traverseApp {M} [Monad M]\n  (f : Expr \u2192 M Expr) (e : Expr) : M Expr :=\n  e.withApp fun fn args => mkAppN <$> f fn <*> args.mapM f\n@[specialize] private def withAppRevAux (k : Expr \u2192 Array Expr \u2192 \u03b1) : Expr \u2192 Array Expr \u2192 \u03b1\n  | app f a, as => withAppRevAux k f (as.push a)\n  | f,       as => k f as\ndef getRevArg!' : Expr \u2192 Nat \u2192 Expr\n  | mdata _ a, i => getRevArg!' a i\n  | app _ a, 0   => a",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Expr.lean",
    "definition_type": "def",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Expr.lean",
    "definition_name": "Expr"
  }
}