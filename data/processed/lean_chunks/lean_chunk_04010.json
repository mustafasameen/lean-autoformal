{
  "content": "theorem not_ofBool : ~~~ (ofBool b) = ofBool (!b) := by cases b <;> rfl\n@[simp] theorem ofBool_and_ofBool : ofBool b &&& ofBool b' = ofBool (b && b') := by\n  cases b <;> cases b' <;> rfl\n@[simp] theorem ofBool_or_ofBool : ofBool b ||| ofBool b' = ofBool (b || b') := by\n  cases b <;> cases b' <;> rfl\n@[simp] theorem ofBool_xor_ofBool : ofBool b ^^^ ofBool b' = ofBool (b ^^ b') := by\n  cases b <;> cases b' <;> rfl\n@[simp, bitvec_to_nat] theorem toNat_ofFin (x : Fin (2^n)) : (BitVec.ofFin x).toNat = x.val := rfl\n@[simp] theorem toNat_ofNatLT (x : Nat) (p : x < 2^w) : (x#'p).toNat = x := rfl\n@[deprecated toNat_ofNatLT (since := \"2025-02-13\")]\ntheorem toNat_ofNatLt (x : Nat) (p : x < 2^w) : (x#'p).toNat = x := rfl\n@[simp] theorem getLsbD_ofNatLT {n : Nat}",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/BitVec/Lemmas.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/BitVec/Lemmas.lean",
    "definition_name": "not_ofBool",
    "has_proof": true
  }
}