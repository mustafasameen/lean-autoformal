{
  "content": "instance\nprivate def setDefName (stx : Syntax) (name : Name) : Syntax :=\n  if isNamedDef stx then\n    stx.setArg 1 <| stx[1].setArg 1 <| setDeclIdName stx[1][1] name\n  else if isInstanceDef stx then\n    assert! !stx[1][3].isNone\n    stx.setArg 1 <| stx[1].setArg 3 <| stx[1][3].setArg 0 <| setDeclIdName stx[1][3][0] name\n  else\n    stx\nprivate def expandDeclNamespace? (stx : Syntax) : MacroM (Option (Name \u00d7 Syntax)) := do\n  let some name := getDefName? stx | return none\n  if (`_root_).isPrefixOf name then\n    ensureValidNamespace (name.replacePrefix `_root_ Name.anonymous)\n    return none\n  let scpView := extractMacroScopes name\n  match scpView.name with\n  | .str .anonymous _ => return none\n  | .str pre shortName => return some (pre, setDefName stx { scpView with name := .mkSimple shortName }",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Elab/Declaration.lean",
    "definition_type": "instance",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Elab/Declaration.lean",
    "definition_name": "private"
  }
}