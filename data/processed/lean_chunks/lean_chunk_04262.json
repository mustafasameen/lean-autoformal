{
  "content": "rw [BitVec.toNat_sub_of_le hdr']\n      omega\n    case neg.hqWidth =>\n      apply toNat_shiftConcat_lt_of_lt <;> omega\n    case neg.hdiv =>\n      have rltd' := (BitVec.not_lt_iff_le.mp rltd)\n      simp only [qr.toNat_shiftRight_sub_one_eq h,\n        BitVec.toNat_sub_of_le rltd',\n        toNat_shiftConcat_eq_of_lt (qr.wr_lt_w h) h.hrWidth]\n      simp only [BitVec.le_def,\n        toNat_shiftConcat_eq_of_lt (qr.wr_lt_w h) h.hrWidth] at rltd'\n      simp only [toNat_shiftConcat_eq_of_lt (qr.wr_lt_w h) h.hqWidth, h.hdiv, Nat.mul_add]\n      bv_omega\ndef divRec {w : Nat}",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/BitVec/Bitblast.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/BitVec/Bitblast.lean",
    "definition_name": "two_mul_add_sub_lt_of_lt_of_lt_two",
    "has_proof": true
  }
}