{
  "content": "theorem gcd_zero_left (y : Nat) : gcd 0 y = y := by\n  rw [gcd]; rfl\ntheorem gcd_succ (x y : Nat) : gcd (succ x) y = gcd (y % succ x) (succ x) := by\n  rw [gcd]; rfl\ntheorem gcd_add_one (x y : Nat) : gcd (x + 1) y = gcd (y % (x + 1)) (x + 1) := by\n  rw [gcd]; rfl\ntheorem gcd_def (x y : Nat) : gcd x y = if x = 0 then y else gcd (y % x) x := by\n  cases x <;> simp [Nat.gcd_add_one]\n@[simp] theorem gcd_one_left (n : Nat) : gcd 1 n = 1 := by\n  rw [gcd_succ, mod_one]\n  rfl\n@[simp] theorem gcd_zero_right (n : Nat) : gcd n 0 = n := by\n  cases n with\n  | zero => simp [gcd_succ]\n  | succ n =>\n    rw [gcd_succ]\n    exact gcd_zero_left _\ninstance : Std.LawfulIdentity gcd 0 where\n  left_id := gcd_zero_left\n  right_id := gcd_zero_right\n@[simp] theorem gcd_self (n : Nat) : gcd n n = n := by\n  cases n <;> simp [gcd_succ]\ninstance : Std.IdempotentOp gcd := \u27e8gcd_self\u27e9\ntheorem gcd_rec (m n : Nat) : gcd m n = gcd (n % m) m :=\n  match m with\n  | 0 => by have := (mod_zero n).symm; rwa [gcd, gcd_zero_right]",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Nat/Gcd.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Nat/Gcd.lean",
    "definition_name": "gcd_zero_left",
    "has_proof": true
  }
}