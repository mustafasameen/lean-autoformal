{
  "content": "theorem mod_two_pow_succ (x i : Nat) :\n    x % 2^(i+1) = 2^i*(x.testBit i).toNat + x % (2 ^ i):= by\n  rw [Nat.mod_pow_succ, Nat.add_comm, Nat.toNat_testBit]\nprivate theorem mod_two_pow_add_mod_two_pow_add_bool_lt_two_pow_succ\n     (x y i : Nat) (c : Bool) : x % 2^i + (y % 2^i + c.toNat) < 2^(i+1) := by\n  have : c.toNat \u2264 1 := Bool.toNat_le c\n  rw [Nat.pow_succ]\n  omega\ndef carry (i : Nat) (x y : BitVec w) (c : Bool) : Bool :=\n  decide (x.toNat % 2^i + y.toNat % 2^i + c.toNat \u2265 2^i)\n@[simp] theorem carry_zero : carry 0 x y c = c := by\n  cases c <;> simp [carry, mod_one]\ntheorem carry_succ (i : Nat) (x y : BitVec w) (c : Bool) :\n    carry (i+1) x y c = atLeastTwo (x.getLsbD i) (y.getLsbD i) (carry i x y c) := by\n  simp only [carry, mod_two_pow_succ, atLeastTwo, getLsbD]\n  simp only [Nat.pow_succ']\n  have sum_bnd : x.toNat%2^i + (y.toNat%2^i + c.toNat) < 2*2^i := by\n    simp only [\u2190 Nat.pow_succ']\n    exact mod_two_pow_add_mod_two_pow_add_bool_lt_two_pow_succ ..",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/BitVec/Bitblast.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/BitVec/Bitblast.lean",
    "definition_name": "mod_two_pow_succ",
    "has_proof": true
  }
}