{
  "content": "theorem forIn'_eq_foldlM [Monad m] [LawfulMonad m]\n    (l : List \u03b1) (f : (a : \u03b1) \u2192 a \u2208 l \u2192 \u03b2 \u2192 m (ForInStep \u03b2)) (init : \u03b2) :\n    forIn' l init f = ForInStep.value <$>\n      l.attach.foldlM (fun b \u27e8a, m\u27e9 => match b with\n        | .yield b => f a m b\n        | .done b => pure (.done b)) (ForInStep.yield init) := by\n  induction l generalizing init with\n  | nil => simp\n  | cons a as ih =>\n    simp only [forIn'_cons, attach_cons, foldlM_cons, _root_.map_bind]\n    congr 1\n    funext x\n    match x with\n    | .done b =>\n      clear ih\n      dsimp\n      induction as with\n      | nil => simp\n      | cons a as ih =>\n        simp only [attach_cons, map_cons, map_map, Function.comp_def, foldlM_cons, pure_bind]\n        specialize ih (fun a m b => f a (by\n          simp only [mem_cons] at m\n          rcases m with rfl|m\n          \u00b7 apply mem_cons_self\n          \u00b7 exact mem_cons_of_mem _ (mem_cons_of_mem _ m)) b)\n        simp [ih, List.foldlM_map]\n    | .yield b =>\n      simp [ih, List.foldlM_map]",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/List/Monadic.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/List/Monadic.lean",
    "definition_name": "forIn",
    "has_proof": true
  }
}