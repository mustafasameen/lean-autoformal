{
  "content": "| invalidProj      (env : Environment) (lctx : LocalContext) (proj : Expr)\n  | thmTypeIsNotProp (env : Environment) (name : Name) (type : Expr)\n  | other            (msg : String)\n  | deterministicTimeout\n  | excessiveMemory\n  | deepRecursion\n  | interrupted\nnamespace Environment\n@[export lean_environment_find]\ndef find? (env : Environment) (n : Name) : Option ConstantInfo :=\n@[extern \"lean_add_decl\"]\nopaque addDeclCore (env : Environment) (maxHeartbeats : USize) (decl : @& Declaration)\n  (cancelTk? : @& Option IO.CancelToken) : Except Exception Environment\n@[extern \"lean_add_decl_without_checking\"]\nopaque addDeclWithoutChecking (env : Environment) (decl : @& Declaration) : Except Exception Environment\n@[export lean_environment_add]\nprivate def add (env : Environment) (cinfo : ConstantInfo) : Environment :=\n  { env with constants := env.constants.insert cinfo.name cinfo }",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Environment.lean",
    "definition_type": "inductive",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Environment.lean",
    "definition_name": "Exception"
  }
}