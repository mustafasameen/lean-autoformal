{
  "content": "induction i using Nat.strongRecOn generalizing x y with\n  | ind i hyp =>\n    unfold bitwise\n    if x_zero : x = 0 then\n      cases p : f false true <;>\n        cases yi : testBit y i <;>\n          simp [x_zero, p, yi, of_false_false]\n    else if y_zero : y = 0 then\n      simp [x_zero, y_zero]\n      cases p : f true false <;>\n        cases xi : testBit x i <;>\n          simp [p, xi, of_false_false]\n    else\n      simp only [x_zero, y_zero, \u2190Nat.two_mul]\n      cases i with\n      | zero =>\n        cases p : f (decide (x % 2 = 1)) (decide (y % 2 = 1)) <;>\n          simp [p, Nat.mul_add_mod, mod_eq_of_lt]\n      | succ i =>\n        have hyp_i := hyp i (Nat.le_refl (i+1))\n        cases p : f (decide (x % 2 = 1)) (decide (y % 2 = 1)) <;>\n          simp [p, one_div_two, hyp_i, Nat.mul_add_div]\ntheorem bitwise_lt_two_pow (left : x < 2^n) (right : y < 2^n) : (Nat.bitwise f x y) < 2^n := by\n  induction n generalizing x y with\n  | zero =>\n    simp only [eq_0_of_lt] at left right",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Nat/Bitwise/Lemmas.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Nat/Bitwise/Lemmas.lean",
    "definition_name": "testBit_mod_two_pow",
    "has_proof": true
  }
}