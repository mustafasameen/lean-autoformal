{
  "content": "theorem unzip_fst : (unzip l).fst = l.map Prod.fst := by\n  induction l <;> simp_all\n@[simp] theorem unzip_snd : (unzip l).snd = l.map Prod.snd := by\n  induction l <;> simp_all\n@[deprecated unzip_fst (since := \"2024-07-28\")] abbrev unzip_left := @unzip_fst\n@[deprecated unzip_snd (since := \"2024-07-28\")] abbrev unzip_right := @unzip_snd\ntheorem unzip_eq_map : \u2200 l : List (\u03b1 \u00d7 \u03b2), unzip l = (l.map Prod.fst, l.map Prod.snd)\n  | [] => rfl\n  | (a, b) :: l => by simp only [unzip_cons, map_cons, unzip_eq_map l]\ntheorem zip_unzip : \u2200 l : List (\u03b1 \u00d7 \u03b2), zip (unzip l).1 (unzip l).2 = l\n  | [] => rfl\n  | (a, b) :: l => by simp only [unzip_cons, zip_cons_cons, zip_unzip l]\ntheorem unzip_zip_left :\n    \u2200 {l\u2081 : List \u03b1}",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/List/Zip.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/List/Zip.lean",
    "definition_name": "unzip_fst",
    "has_proof": true
  }
}