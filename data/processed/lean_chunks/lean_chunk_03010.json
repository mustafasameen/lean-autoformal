{
  "content": "structure ExprStructEq where\n  val : Expr\n  deriving Inhabited\ninstance : Coe Expr ExprStructEq := \u27e8ExprStructEq.mk\u27e9\nnamespace ExprStructEq\nprotected def beq : ExprStructEq \u2192 ExprStructEq \u2192 Bool\n  | \u27e8e\u2081\u27e9, \u27e8e\u2082\u27e9 => Expr.equal e\u2081 e\u2082\nprotected def hash : ExprStructEq \u2192 UInt64\n  | \u27e8e\u27e9 => e.hash\ninstance : BEq ExprStructEq := \u27e8ExprStructEq.beq\u27e9\ninstance : Hashable ExprStructEq := \u27e8ExprStructEq.hash\u27e9\ninstance : ToString ExprStructEq := \u27e8fun e => toString e.val\u27e9\nend ExprStructEq\nabbrev ExprStructMap (\u03b1 : Type) := Std.HashMap ExprStructEq \u03b1\nabbrev PersistentExprStructMap (\u03b1 : Type) := PHashMap ExprStructEq \u03b1\nnamespace Expr\nprivate partial def mkAppRevRangeAux (revArgs : Array Expr) (start : Nat) (b : Expr) (i : Nat) : Expr :=\n  if i == start then b\n  else\n    let i := i - 1\n    mkAppRevRangeAux revArgs start (mkApp b revArgs[i]!) i\npartial def betaRev (f : Expr) (revArgs : Array Expr) (useZeta := false) (preserveMData := false) : Expr :=\n  if revArgs.size == 0 then f\n  else",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Expr.lean",
    "definition_type": "structure",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Expr.lean",
    "definition_name": "ExprStructEq"
  }
}