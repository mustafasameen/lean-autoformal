{
  "content": "| .node .black a ky vy b =>\n      if kx < ky then\n        (if isRed a then balance1 ky vy b (ins kx vx a)\n         else .node .black (ins kx vx a) ky vy b)\n      else if kx = ky then .node .black a kx vx b\n      else if isRed b then balance2 a ky vy (ins kx vx b)\n      else .node .black a ky vy (ins kx vx b)\ndef setBlack : Tree \u2192 Tree\n  | .node _ l k v r   => .node .black l k v r\n  | e                 => e\ndef insert (k : Nat) (v : Bool) (t : Tree) : Tree :=\n  if isRed t then setBlack (ins k v t)\n  else ins k v t\ndef mkMapAux (freq : Nat) : Nat \u2192 Tree \u2192 List Tree \u2192 List Tree\n  | 0,   m, r => m::r\n  | n+1, m, r =>\n    let m := insert n (n % 10 = 0) m\n    let r := if n % freq == 0 then m::r else r\n    mkMapAux freq n m r\ndef mkMap (n : Nat) (freq : Nat) : List Tree :=\n  mkMapAux freq n .leaf []\ndef myLen : List Tree \u2192 Nat \u2192 Nat\n  | .node .. :: xs, r => myLen xs (r + 1)\n  | _ :: xs,        r => myLen xs r\n  | [],             r => r\ndef main (xs : List String) : IO Unit := do",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/bench/rbmap_checkpoint.lean",
    "definition_type": "inductive",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/bench/rbmap_checkpoint.lean",
    "definition_name": "Color"
  }
}