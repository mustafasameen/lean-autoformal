{
  "content": "theorem count_tail : \u2200 (l : List \u03b1) (a : \u03b1) (h : l \u2260 []),\n      l.tail.count a = l.count a - if l.head h == a then 1 else 0\n  | _ :: _, a, _ => by simp [count_cons]\ntheorem count_le_length (a : \u03b1) (l : List \u03b1) : count a l \u2264 l.length := countP_le_length _\ntheorem Sublist.count_le (h : l\u2081 <+ l\u2082) (a : \u03b1) : count a l\u2081 \u2264 count a l\u2082 := h.countP_le _\ntheorem IsPrefix.count_le (h : l\u2081 <+: l\u2082) (a : \u03b1) : count a l\u2081 \u2264 count a l\u2082 := h.sublist.count_le _\ntheorem IsSuffix.count_le (h : l\u2081 <:+ l\u2082) (a : \u03b1) : count a l\u2081 \u2264 count a l\u2082 := h.sublist.count_le _\ntheorem IsInfix.count_le (h : l\u2081 <:+: l\u2082) (a : \u03b1) : count a l\u2081 \u2264 count a l\u2082 := h.sublist.count_le _\ntheorem count_tail_le (a : \u03b1) (l) : count a l.tail \u2264 count a l :=\n  (tail_sublist l).count_le _\ntheorem count_le_count_cons (a b : \u03b1) (l : List \u03b1) : count a l \u2264 count a (b :: l) :=\n  (sublist_cons_self _ _).count_le _\ntheorem count_singleton (a b : \u03b1) : count a [b] = if b == a then 1 else 0 := by\n  simp [count_cons]",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/List/Count.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/List/Count.lean",
    "definition_name": "count_tail",
    "has_proof": true
  }
}