{
  "content": "simp [Bool.or_and_distrib_left]\ntheorem or_and_distrib_right (x y z : Nat) : (x &&& y) ||| z = (x ||| z) &&& (y ||| z) := by\n   apply Nat.eq_of_testBit_eq\n   simp [Bool.or_and_distrib_right]\ninstance : Std.Associative (\u03b1 := Nat) (\u00b7 ||| \u00b7) where\n  assoc := Nat.or_assoc\ninstance : Std.Commutative (\u03b1 := Nat) (\u00b7 ||| \u00b7) where\n  comm := Nat.or_comm\ninstance : Std.IdempotentOp (\u03b1 := Nat) (\u00b7 ||| \u00b7) where\n  idempotent := Nat.or_self\ninstance : Std.LawfulCommIdentity (\u03b1 := Nat) (\u00b7 ||| \u00b7) 0 where\n  left_id := zero_or\n  right_id := or_zero\ntheorem or_lt_two_pow {x y n : Nat}",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Nat/Bitwise/Lemmas.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Nat/Bitwise/Lemmas.lean",
    "definition_name": "testBit_mod_two_pow",
    "has_proof": true
  }
}