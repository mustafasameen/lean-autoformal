{
  "content": "theorem range'_concat (s n : Nat) : range' s (n + 1) step = range' s n step ++ [s + step * n] := by\n  exact (range'_append s n 1 step).symm\ntheorem range'_1_concat (s n : Nat) : range' s (n + 1) = range' s n ++ [s + n] := by\n  simp [range'_concat]\ntheorem range'_eq_cons_iff : range' s n = a :: xs \u2194 s = a \u2227 0 < n \u2227 xs = range' (a + 1) (n - 1) := by\n  induction n generalizing s with\n  | zero => simp\n  | succ n ih =>\n    simp only [range'_succ]\n    simp only [cons.injEq, and_congr_right_iff]\n    rintro rfl\n    simp [eq_comm]\n@[simp]\ntheorem zipIdx_eq_nil_iff {l : List \u03b1}",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/List/Range.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/List/Range.lean",
    "definition_name": "range",
    "has_proof": true
  }
}