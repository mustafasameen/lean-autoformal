{
  "content": "| Expr.op a b => concat (flat a) (flat b)\n  | Expr.var i  => Expr.var i\ntheorem Expr.denote_flat (ctx : Context \u03b1) (e : Expr) : denote ctx (flat e) = denote ctx e := by\n  induction e with\n  | var i => rfl\n  | op a b ih\u2081 ih\u2082 => simp [flat, denote, denote_concat, ih\u2081, ih\u2082]\ntheorem Expr.eq_of_flat (ctx : Context \u03b1) (a b : Expr) (h : flat a = flat b) : denote ctx a = denote ctx b := by\n  have h := congrArg (denote ctx) h\n  simp [denote_flat] at h\n  assumption\ndef Expr.length : Expr \u2192 Nat\n  | op a b => 1 + b.length\n  | _      => 1\ndef Expr.sort (e : Expr) : Expr :=\n  loop e.length e\nwhere\n  loop : Nat \u2192 Expr \u2192 Expr\n    | fuel+1, Expr.op a e =>\n      let (e\u2081, e\u2082) := swap a e\n      Expr.op e\u2081 (loop fuel e\u2082)\n    | _, e => e\n  swap : Expr \u2192 Expr \u2192 Expr \u00d7 Expr\n    | Expr.var i, Expr.op (Expr.var j) e =>\n      if i > j then\n        let (e\u2081, e\u2082) := swap (Expr.var j) e\n        (e\u2081, Expr.op (Expr.var i) e\u2082)\n      else\n        let (e\u2081, e\u2082) := swap (Expr.var i) e",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/lean/run/ac_expr.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/lean/run/ac_expr.lean",
    "definition_name": "Context",
    "has_proof": true
  }
}