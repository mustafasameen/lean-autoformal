{
  "content": "monotone (fun x => g x <* f x) := by\n  simp only [seqLeft_eq]\n  apply Seq.monotone_seq\n  \u00b7 apply Functor.monotone_map\n    assumption\n  \u00b7 assumption\n@[partial_fixpoint_monotone]\ntheorem SeqRight.monotone_seqRight [LawfulMonad m] (f : \u03b3 \u2192 m \u03b1) (g : \u03b3 \u2192 m \u03b2)\n  (hmono\u2081 : monotone g) (hmono\u2082 : monotone f) :\n    monotone (fun x => g x *> f x) := by\n  simp only [seqRight_eq]\n  apply Seq.monotone_seq\n  \u00b7 apply Functor.monotone_map\n    assumption\n  \u00b7 assumption\nnamespace Option\n@[partial_fixpoint_monotone]\ntheorem monotone_bindM (f : \u03b3 \u2192 \u03b1 \u2192 m (Option \u03b2)) (xs : Option \u03b1) (hmono : monotone f) :\n    monotone (fun x => xs.bindM (f x)) := by\n  cases xs with\n  | none => apply monotone_const\n  | some x =>\n    apply monotone_bind\n    \u00b7 apply monotone_apply\n      apply hmono\n    \u00b7 apply monotone_const\n@[partial_fixpoint_monotone]\ntheorem monotone_mapM (f : \u03b3 \u2192 \u03b1 \u2192 m \u03b2) (xs : Option \u03b1) (hmono : monotone f) :\n    monotone (fun x => xs.mapM (f x)) := by\n  cases xs with",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Internal/Order/Lemmas.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Internal/Order/Lemmas.lean",
    "definition_name": "Functor",
    "has_proof": true
  }
}