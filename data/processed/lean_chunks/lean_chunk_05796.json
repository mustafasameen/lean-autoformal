{
  "content": "theorem lt_div_iff_mul_lt (h : 0 < k) : x < y / k \u2194 x * k < y - (k - 1) := by\n  have t := le_div_iff_mul_le h (x := x + 1) (y := y)\n  rw [succ_le, add_one_mul] at t\n  have s : k = k - 1 + 1 := by omega\n  conv at t => rhs; lhs; rhs; rw [s]\n  rw [\u2190 Nat.add_assoc, succ_le, add_lt_iff_lt_sub_right] at t\n  exact t\ntheorem div_le_iff_le_mul (h : 0 < k) : x / k \u2264 y \u2194 x \u2264 y * k + k - 1 := by\n  rw [le_iff_lt_add_one, Nat.div_lt_iff_lt_mul h, Nat.add_one_mul]\n  omega\nprotected theorem div_eq_iff (h : 0 < k) : x / k = y \u2194 x \u2264 y * k + k - 1 \u2227 y * k \u2264 x := by\n  rw [Nat.eq_iff_le_and_ge, le_div_iff_mul_le h, Nat.div_le_iff_le_mul h]\ntheorem lt_of_div_eq_zero (h : 0 < k) (h' : x / k = 0) : x < k := by\n  rw [Nat.div_eq_iff h] at h'\n  omega\ntheorem div_eq_zero_iff_lt (h : 0 < k) : x / k = 0 \u2194 x < k :=\n  \u27e8lt_of_div_eq_zero h, fun h' => Nat.div_eq_of_lt h'\u27e9\ntheorem div_mul_self_eq_mod_sub_self {x k : Nat}",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Nat/Div/Lemmas.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Nat/Div/Lemmas.lean",
    "definition_name": "lt_div_iff_mul_lt",
    "has_proof": true
  }
}