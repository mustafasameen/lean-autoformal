{
  "content": "theorem isSuffixOf_nil_left [BEq \u03b1] : isSuffixOf ([] : List \u03b1) l = true := by\n  simp [isSuffixOf]\ndef IsSuffix (l\u2081 : List \u03b1) (l\u2082 : List \u03b1) : Prop := Exists fun t => t ++ l\u2081 = l\u2082\n@[inherit_doc] infixl:50 \" <:+ \" => IsSuffix\ndef IsInfix (l\u2081 : List \u03b1) (l\u2082 : List \u03b1) : Prop := Exists fun s => Exists fun t => s ++ l\u2081 ++ t = l\u2082\n@[inherit_doc] infixl:50 \" <:+: \" => IsInfix\ndef splitAt (n : Nat) (l : List \u03b1) : List \u03b1 \u00d7 List \u03b1 := go l n [] where\n  go : List \u03b1 \u2192 Nat \u2192 List \u03b1 \u2192 List \u03b1 \u00d7 List \u03b1\n| [], _, _ => (l, [])\n  | x :: xs, n+1, acc => go xs n (x :: acc)\n  | xs, _, acc => (acc.reverse, xs)\ndef rotateLeft (xs : List \u03b1) (i : Nat := 1) : List \u03b1 :=\n  let len := xs.length\n  if len \u2264 1 then\n    xs\n  else\n    let i := i % len\n    let ys := xs.take i\n    let zs := xs.drop i\n    zs ++ ys\n@[simp] theorem rotateLeft_nil : ([] : List \u03b1).rotateLeft n = [] := rfl\ndef rotateRight (xs : List \u03b1) (i : Nat := 1) : List \u03b1 :=\n  let len := xs.length\n  if len \u2264 1 then\n    xs\n  else\n    let i := len - i % len",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/List/Basic.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/List/Basic.lean",
    "definition_name": "isSuffixOf_nil_left",
    "has_proof": true
  }
}