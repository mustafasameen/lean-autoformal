{
  "content": "induction fuel generalizing m\u2081 m\u2082 r\u2081 r\u2082 with\n  | zero => assumption\n  | succ fuel ih =>\n    simp at h\n    split at h <;> (try simp; assumption)\n    rename_i k\u2081 v\u2081 m\u2081 k\u2082 v\u2082 m\u2082\n    by_cases hltv : Nat.blt v\u2081 v\u2082 <;> simp [hltv] at h\n    \u00b7 have ih := ih (h := h); simp [denote_eq] at ih \u22a2; assumption\n    \u00b7 by_cases hgtv : Nat.blt v\u2082 v\u2081 <;> simp [hgtv] at h\n      \u00b7 have ih := ih (h := h); simp [denote_eq] at ih \u22a2; assumption\n      \u00b7 have heqv : v\u2081 = v\u2082 := eq_of_not_blt_eq_true hltv hgtv; subst heqv\n        by_cases hltk : Nat.blt k\u2081 k\u2082 <;> simp [hltk] at h\n        \u00b7 have ih := ih (h := h); simp [denote_eq] at ih \u22a2\n          have haux : k\u2081 * Var.denote ctx v\u2081 \u2264 k\u2082 * Var.denote ctx v\u2081 := Nat.mul_le_mul_right _ (Nat.le_of_lt (Nat.blt_eq.mp hltk))\n          rw [Nat.mul_sub_right_distrib, \u2190 Nat.add_assoc, \u2190 Nat.add_sub_assoc haux] at ih\n          have ih := Nat.eq_add_of_sub_eq (Nat.le_trans haux (Nat.le_add_left ..)) ih.symm\n          simp at ih\n          rw [ih]",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Nat/Linear.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Nat/Linear.lean",
    "definition_name": "Poly",
    "has_proof": true
  }
}