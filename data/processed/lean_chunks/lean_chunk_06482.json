{
  "content": "| true  => .yes\n  | false => .no\nprivate def TacticMVarKind.logError (tacticCode : Syntax) (kind : TacticMVarKind) : TermElabM Unit := do\n  match kind with\n  | term => pure ()\n  | autoParam argName => logErrorAt tacticCode m!\"could not synthesize default value for parameter '{argName}' using tactics\"\n  | fieldAutoParam fieldName structName => logErrorAt tacticCode m!\"could not synthesize default value for field '{fieldName}' of '{structName}' using tactics\"\nprivate def TacticMVarKind.maybeWithoutRecovery (kind : TacticMVarKind) (m : TacticM \u03b1) : TacticM \u03b1 := do\n  if kind matches .autoParam .. | .fieldAutoParam .. then\n    withoutErrToSorry <| Tactic.withoutRecover <| m\n  else\n    m\nmutual\n  partial def runTactic (mvarId : MVarId) (tacticCode : Syntax) (kind : TacticMVarKind) (report := true) : TermElabM Unit := withoutAutoBoundImplicit do\n    instantiateMVarDeclMVars mvarId\n    tryCatchRuntimeEx",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Elab/SyntheticMVars.lean",
    "definition_type": "def",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Elab/SyntheticMVars.lean",
    "definition_name": "reportStuckSyntheticMVars"
  }
}