{
  "content": "get s (prev s s.endPos)\n@[extern \"lean_string_utf8_at_end\"]\ndef atEnd : (@& String) \u2192 (@& Pos) \u2192 Bool\n  | s, p => p.byteIdx \u2265 utf8ByteSize s\n@[extern \"lean_string_utf8_get_fast\"]\ndef get' (s : @& String) (p : @& Pos) (h : \u00ac s.atEnd p) : Char :=\n  match s with\n  | \u27e8s\u27e9 => utf8GetAux s 0 p\n@[extern \"lean_string_utf8_next_fast\"]\ndef next' (s : @& String) (p : @& Pos) (h : \u00ac s.atEnd p) : Pos :=\n  let c := get s p\n  p + c\ntheorem _root_.Char.utf8Size_pos (c : Char) : 0 < c.utf8Size := by\n  repeat first | apply iteInduction (motive := (0 < \u00b7)) <;> intros | decide\ntheorem _root_.Char.utf8Size_le_four (c : Char) : c.utf8Size \u2264 4 := by\n  repeat first | apply iteInduction (motive := (\u00b7 \u2264 4)) <;> intros | decide\n@[deprecated Char.utf8Size_pos (since := \"2026-06-04\")] abbrev one_le_csize := Char.utf8Size_pos\n@[simp] theorem pos_lt_eq (p\u2081 p\u2082 : Pos) : (p\u2081 < p\u2082) = (p\u2081.1 < p\u2082.1) := rfl\n@[simp] theorem pos_add_char (p : Pos) (c : Char) : (p + c).byteIdx = p.byteIdx + c.utf8Size := rfl",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/String/Basic.lean",
    "definition_type": "instance",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/String/Basic.lean",
    "definition_name": "decidableLT",
    "has_proof": true
  }
}