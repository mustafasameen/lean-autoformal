{
  "content": "exact h hf'\ntheorem State.cons_le_cons (h : \u03c3' \u227c \u03c3) : (x, v) :: \u03c3' \u227c (x, v) :: \u03c3 := by\n  intro y w hf'\n  by_cases hyx : y = x <;> simp [*] at hf' |-\n  next => assumption\n  next => exact h hf'\ntheorem State.cons_le_of_eq (h\u2081 : \u03c3' \u227c \u03c3) (h\u2082 : \u03c3.find? x = some v) : (x, v) :: \u03c3' \u227c \u03c3 := by\n  intro y w hf'\n  by_cases hyx : y = x <;> simp [*] at hf' |-\n  next => assumption\n  next => exact h\u2081 hf'\ntheorem State.erase_le (\u03c3 : State) : \u03c3.erase x \u227c \u03c3 := by\n  match \u03c3 with\n  | [] => simp; apply le_refl\n  | (y, v) :: \u03c3 =>\n    simp\n    split <;> try simp [*]\n    next => apply erase_le_cons; apply le_refl\n    next => apply cons_le_cons; apply erase_le\ntheorem State.join_le_left (\u03c3\u2081 \u03c3\u2082 : State) : \u03c3\u2081.join \u03c3\u2082 \u227c \u03c3\u2081 := by\n  match \u03c3\u2081 with\n  | [] => simp; apply le_refl\n  | (x, v) :: \u03c3\u2081 =>\n    simp\n    have : (erase \u03c3\u2081 x).length < \u03c3\u2081.length.succ := length_erase_lt ..\n    have ih := join_le_left (State.erase \u03c3\u2081 x) \u03c3\u2082\n    split\n    next y w h =>\n      split",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/lean/run/constProp.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/lean/run/constProp.lean",
    "definition_name": "Stmt",
    "has_proof": true
  }
}