{
  "content": "simp [next, get, set, endPos, utf8ByteSize] at h \u22a2\n  rw [Nat.add_comm i.1, Nat.add_assoc] at h \u22a2\n  let rec foo : \u2200 cs a b\u2081 b\u2082,\n    (utf8GetAux cs a i).utf8Size + b\u2081 = utf8ByteSize.go cs + b\u2082 \u2192\n    (utf8GetAux (utf8SetAux c cs a i) a i).utf8Size + b\u2081 = utf8ByteSize.go (utf8SetAux c cs a i) + b\u2082\n  | [], _, _, _, h => h\n  | c'::cs, a, b\u2081, b\u2082, h => by\n    unfold utf8SetAux\n    apply iteInduction (motive := fun p => (utf8GetAux p a i).utf8Size + b\u2081 = utf8ByteSize.go p + b\u2082) <",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/String/Basic.lean",
    "definition_type": "def",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/String/Basic.lean",
    "definition_name": "toString",
    "has_proof": true
  }
}