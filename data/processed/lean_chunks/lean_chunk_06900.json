{
  "content": "let stats \u2190 x\n  Simp.reportDiag stats\n@[builtin_tactic Lean.Parser.Tactic.simp] def evalSimp : Tactic := fun stx => withMainContext do withSimpDiagnostics do\n  let { ctx, simprocs, dischargeWrapper } \u2190 mkSimpContext stx (eraseLocal := false)\n  let stats \u2190 dischargeWrapper.with fun discharge? =>\n    simpLocation ctx simprocs discharge? (expandOptLocation stx[5])\n  if tactic.simp.trace.get (\u2190 getOptions) then\n    traceSimpCall stx stats.usedTheorems\n  return stats.diag\n@[builtin_tactic Lean.Parser.Tactic.simpAll] def evalSimpAll : Tactic := fun stx => withMainContext do withSimpDiagnostics do\n  let { ctx, simprocs, .. } \u2190 mkSimpContext stx (eraseLocal := true) (kind := .simpAll) (ignoreStarArg := true)\n  let (result?, stats) \u2190 simpAll (\u2190 getMainGoal) ctx (simprocs := simprocs)\n  match result? with\n  | none => replaceMainGoal []\n  | some mvarId => replaceMainGoal [mvarId]\n  if tactic.simp.trace.get (\u2190 getOptions) then\n    traceSimpCall stx stats.usedTheorems\n  return stats.diag",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Elab/Tactic/Simp.lean",
    "definition_type": "def",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Elab/Tactic/Simp.lean",
    "definition_name": "simpParamsPos"
  }
}