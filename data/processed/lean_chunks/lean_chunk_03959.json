{
  "content": "theorem getElem?_zero_filter (p : \u03b1 \u2192 Bool) (xs : Array \u03b1) :\n    (xs.filter p)[0]? = xs.find? p := by\n  cases xs; simp [\u2190 List.head?_eq_getElem?]\n@[simp] theorem getElem_zero_filter (p : \u03b1 \u2192 Bool) (xs : Array \u03b1) (h) :\n    (xs.filter p)[0] =\n      (xs.find? p).get (by cases xs; simpa [\u2190 List.countP_eq_length_filter] using h) := by\n  cases xs\n  simp [List.getElem_zero_eq_head]\n@[simp] theorem back?_filter (p : \u03b1 \u2192 Bool) (xs : Array \u03b1) : (xs.filter p).back? = xs.findRev? p := by\n  cases xs; simp\n@[simp] theorem back!_filter [Inhabited \u03b1] (p : \u03b1 \u2192 Bool) (xs : Array \u03b1) :\n    (xs.filter p).back! = (xs.findRev? p).get! := by\n  cases xs; simp [Option.get!_eq_getD]\n@[simp] theorem find?_filterMap (xs : Array \u03b1) (f : \u03b1 \u2192 Option \u03b2) (p : \u03b2 \u2192 Bool) :\n    (xs.filterMap f).find? p = (xs.find? (fun a => (f a).any p)).bind f := by\n  cases xs; simp\n@[simp] theorem find?_map (f : \u03b2 \u2192 \u03b1) (xs : Array \u03b2) :\n    find? p (xs.map f) = (xs.find? (p \u2218 f)).map f := by\n  cases xs; simp",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Array/Find.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Array/Find.lean",
    "definition_name": "getElem",
    "has_proof": true
  }
}