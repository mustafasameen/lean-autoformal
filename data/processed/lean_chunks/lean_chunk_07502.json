{
  "content": "rw [f_assignments_size] at hi2\n    specialize h \u27e8i, hi2\u27e9\n    rcases h with \u27e8h1, _\u27e9 | \u27e8j, b, i_gt_zero, j_ge_derivedLits_size, _\u27e9 | \u27e8j1, j2, i_gt_zero, j1_ge_derivedLits_size, _\u27e9\n    \u00b7 simp only [\u2190 derivedLits_arr_def]\n      exact h1\n    \u00b7 exfalso\n      exact (Nat.not_lt_of_le j_ge_derivedLits_size) j.2\n    \u00b7 exfalso\n      exact (Nat.not_lt_of_le j1_ge_derivedLits_size) j1.2\ntheorem rupAdd_result {n : Nat} (f : DefaultFormula n) (c : DefaultClause n) (rupHints : Array Nat) (f' : DefaultFormula n)\n    (f_readyForRupAdd : ReadyForRupAdd f) (rupAddSuccess : performRupAdd f c rupHints = (f', true)) :\n    f' = insert f c := by\n  rw [performRupAdd] at rupAddSuccess\n  simp only [Bool.not_eq_true'] at rupAddSuccess\n  split at rupAddSuccess\n  \u00b7 simp only [clear_insertRup f f_readyForRupAdd (negate c), Prod.mk.injEq, and_true] at rupAddSuccess\n    exact rupAddSuccess.symm\n  \u00b7 split at rupAddSuccess\n    \u00b7 simp at rupAddSuccess\n    \u00b7 split at rupAddSuccess\n      \u00b7 simp at rupAddSuccess",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean",
    "definition_type": "def",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddResult.lean",
    "definition_name": "let",
    "has_proof": true
  }
}