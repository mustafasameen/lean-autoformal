{
  "content": "match stx with\n  | Syntax.node info _ args => Syntax.node info k args\n  | _                       => stx\ndef getArg (stx : Syntax) (i : Nat) : Syntax :=\n  match stx with\n  | Syntax.node _ _ args => args.getD i Syntax.missing\n  | _                    => Syntax.missing\ndef getNumArgs (stx : Syntax) : Nat :=\n  match stx with\n  | Syntax.node _ _ args => args.size\n  | _                    => 0\ndef getOptional? (stx : Syntax) : Option Syntax :=\n  match stx with\n  | Syntax.node _ k args => match and (beq k nullKind) (beq args.size 1) with\n    | true  => some (args.get!Internal 0)\n    | false => none\n  | _                    => none\ndef isNodeOf (stx : Syntax) (k : SyntaxNodeKind) (n : Nat) : Bool :=\n  and (stx.isOfKind k) (beq stx.getNumArgs n)\ndef getId : Syntax \u2192 Name\n  | ident _ _ val _ => val\n  | _               => Name.anonymous\npartial def getHeadInfo? : Syntax \u2192 Option SourceInfo\n  | atom info _   => some info\n  | ident info .. => some info\n  | node SourceInfo.none _ args   =>",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Prelude.lean",
    "definition_type": "inductive",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Prelude.lean",
    "definition_name": "Name"
  }
}