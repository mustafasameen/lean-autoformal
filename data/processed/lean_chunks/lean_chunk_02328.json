{
  "content": "theorem skip_below_eq(n m : Nat) : m < n \u2192 (skip n m = m) :=\n  fun hyp => (provedSkip n m).lt hyp\ntheorem skip_above_eq(n m : Nat) : n \u2264 m \u2192 (skip n m = m + 1) :=\n  fun hyp => (provedSkip n m).ge hyp\ntheorem skip_not_below_eq(n m : Nat) : Not (m < n) \u2192 (skip n m = m + 1) :=\n  fun hyp =>\n    let lem : n \u2264 m :=\n      match Nat.lt_or_ge m n with\n      | Or.inl lt => absurd lt hyp\n      | Or.inr ge => ge\n    skip_above_eq n m lem\ntheorem skip_lt: (k j: Nat) \u2192  skip k j < j + 2 :=\n    fun k j =>\n      if c : j < k then\n        let eqn := skip_below_eq k j c\n        by\n          rw [eqn]\n          apply Nat.le_step\n          apply Nat.le_refl\n          done\n      else\n        let eqn := skip_not_below_eq k j c\n        by\n          rw [eqn]\n          apply Nat.le_refl\n          done\ntheorem skip_le_succ {n k j : Nat}",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/lean/run/smartUnfoldingBug.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/lean/run/smartUnfoldingBug.lean",
    "definition_name": "skip_below_eq",
    "has_proof": true
  }
}