{
  "content": "structure Result where\n  elimApp : Expr\n  motive  : MVarId\n  alts    : Array Alt := #[]\n  others  : Array MVarId := #[]\npartial def mkElimApp (elimInfo : ElimInfo) (targets : Array Expr) (tag : Name) : TermElabM Result := do\n  let rec loop : M Unit := do\n    match (\u2190 getFType) with\n    | .forallE binderName _ _ c =>\n      let ctx \u2190 read\n      let argPos := (\u2190 get).argPos\n      if ctx.elimInfo.motivePos == argPos then\n        let motive \u2190 mkFreshExprMVar (\u2190 getArgExpectedType) MetavarKind.syntheticOpaque\n        modify fun s => { s with motive := motive.mvarId! }",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Elab/Tactic/Induction.lean",
    "definition_type": "structure",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Elab/Tactic/Induction.lean",
    "definition_name": "Result"
  }
}