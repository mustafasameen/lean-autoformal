{
  "content": "structure Raw (\u03b1 : Type u) where\n@[inline] def empty (capacity := 8) : Raw \u03b1 :=\n  \u27e8HashMap.Raw.empty capacity\u27e9\ninstance : EmptyCollection (Raw \u03b1) where\n  emptyCollection := empty\ninstance : Inhabited (Raw \u03b1) where\n  default := \u2205\n@[inline] def insert [BEq \u03b1] [Hashable \u03b1] (m : Raw \u03b1) (a : \u03b1) : Raw \u03b1 :=\n  \u27e8m.inner.insertIfNew a ()\u27e9\ninstance [BEq \u03b1] [Hashable \u03b1] : Singleton \u03b1 (Raw \u03b1) := \u27e8fun a => Raw.empty.insert a\u27e9\ninstance [BEq \u03b1] [Hashable \u03b1] : Insert \u03b1 (Raw \u03b1) := \u27e8fun a s => s.insert a\u27e9\ninstance [BEq \u03b1] [Hashable \u03b1] : LawfulSingleton \u03b1 (Raw \u03b1) := \u27e8fun _ => rfl\u27e9\n@[inline] def containsThenInsert [BEq \u03b1] [Hashable \u03b1] (m : Raw \u03b1) (a : \u03b1) : Bool \u00d7 Raw \u03b1 :=\n  let \u27e8replaced, r\u27e9 := m.inner.containsThenInsertIfNew a ()\n  \u27e8replaced, \u27e8r\u27e9\u27e9\n@[inline] def contains [BEq \u03b1] [Hashable \u03b1] (m : Raw \u03b1) (a : \u03b1) : Bool :=\n  m.inner.contains a\ninstance [BEq \u03b1] [Hashable \u03b1] : Membership \u03b1 (Raw \u03b1) where\n  mem m a := a \u2208 m.inner\ninstance [BEq \u03b1] [Hashable \u03b1] {m : Raw \u03b1}",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Std/Data/HashSet/Raw.lean",
    "definition_type": "structure",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Std/Data/HashSet/Raw.lean",
    "definition_name": "Raw"
  }
}