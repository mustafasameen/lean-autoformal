{
  "content": "simp only [Nat.pow_succ']\n  have sum_bnd : x.toNat%2^i + (y.toNat%2^i + c.toNat) < 2*2^i := by\n    simp only [\u2190 Nat.pow_succ']\n    exact mod_two_pow_add_mod_two_pow_add_bool_lt_two_pow_succ ..\n  cases x.toNat.testBit i <;> cases y.toNat.testBit i <;> (simp; omega)\ntheorem carry_succ_one (i : Nat) (x : BitVec w) (h : 0 < w) :\n    carry (i+1) x (1#w) false = decide (\u2200 j \u2264 i, x.getLsbD j = true) := by\n  induction i with\n  | zero => simp [carry_succ, h]\n  | succ i ih =>\n    rw [carry_succ, ih]\n    simp only [getLsbD_one, add_one_ne_zero, decide_false, Bool.and_false, atLeastTwo_false_mid]\n    cases hx : x.getLsbD (i+1)\n    case false =>\n      have : \u2203 j \u2264 i + 1, x.getLsbD j = false :=\n        \u27e8i+1, by omega, hx\u27e9\n      simpa\n    case true =>\n      suffices\n          (\u2200 (j : Nat), j \u2264 i \u2192 x.getLsbD j = true)\n          \u2194 (\u2200 (j : Nat), j \u2264 i + 1 \u2192 x.getLsbD j = true) by\n        simpa\n      constructor\n      \u00b7 intro h j hj\n        rcases Nat.le_or_eq_of_le_succ hj with (hj' | rfl)",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/BitVec/Bitblast.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/BitVec/Bitblast.lean",
    "definition_name": "mod_two_pow_succ",
    "has_proof": true
  }
}