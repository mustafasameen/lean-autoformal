{
  "content": "theorem append_nil (as : List \u03b1) : append as .nil = as := by\n  induction as with\n  | nil         => grind only [append]\n  | cons _ _ ih => grind only [append]\ntheorem append_assoc (as bs cs : List \u03b1) : append (append as bs) cs = append as (append bs cs) := by\n  induction as with\n  | nil         => grind only [append]\n  | cons _ _ ih => grind only [append]\ndef reverseAux : List \u03b1 \u2192 List \u03b1 \u2192 List \u03b1\n  | .nil,      r => r\n  | .cons a l, r => reverseAux l (.cons a r)\ndef reverse (as : List \u03b1) : List \u03b1 :=\n  reverseAux as .nil\ntheorem reverseAux_eq_append (as bs : List \u03b1) :\n    reverseAux as bs = append (reverseAux as .nil) bs := by\n  induction as generalizing bs with\n  | nil         => grind only [reverseAux, append]\n  | cons _ _ ih => grind only [reverseAux, append_assoc, append]\ntheorem reverse_nil : reverse (.nil : List \u03b1) = .nil := by\n  grind only [reverse, reverseAux]\ntheorem reverse_cons (a : \u03b1) (as : List \u03b1) :\n    reverse (.cons a as) = append (reverse as) (.cons a .nil) := by",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/lean/run/grind_regression.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/lean/run/grind_regression.lean",
    "definition_name": "append_nil",
    "has_proof": true
  }
}