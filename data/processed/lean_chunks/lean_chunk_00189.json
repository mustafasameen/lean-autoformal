{
  "content": "inductive Tree (\u03b2 : Type v) where\n  | leaf\n  | node (left : Tree \u03b2) (key : Nat) (value : \u03b2) (right : Tree \u03b2)\n  deriving Repr\ndef Tree.find? (t : Tree \u03b2) (k : Nat) : Option \u03b2 :=\n  match t with\n  | leaf => none\n  | node left key value right =>\n    if k < key then\n      left.find? k\n    else if key < k then\n      right.find? k\n    else\n      some value\ndef Tree.insert (t : Tree \u03b2) (k : Nat) (v : \u03b2) : Tree \u03b2 :=\n  match t with\n  | leaf => node leaf k v leaf\n  | node left key value right =>\n    if k < key then\n      node (left.insert k v) key value right\n    else if key < k then\n      node left key value (right.insert k v)\n    else\n      node left k v right\ninductive ForallTree (p : Nat \u2192 \u03b2 \u2192 Prop) : Tree \u03b2 \u2192 Prop\n  | leaf : ForallTree p .leaf\n  | node :\n     ForallTree p left \u2192\n     p key value \u2192\n     ForallTree p right \u2192\n     ForallTree p (.node left key value right)\ninductive BST : Tree \u03b2 \u2192 Prop\n  | leaf : BST .leaf\n  | node :\n     {value : \u03b2}",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/lean/bintreeGoal.lean",
    "definition_type": "inductive",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/lean/bintreeGoal.lean",
    "definition_name": "Tree"
  }
}