{
  "content": "theorem toNat_setWidth (i : Nat) (x : BitVec n) :\n    BitVec.toNat (setWidth i x) = x.toNat % 2^i := by\n  let \u27e8x, lt_n\u27e9 := x\n  simp only [setWidth]\n  if n_le_i : n \u2264 i then\n    have x_lt_two_i : x < 2 ^ i := lt_two_pow_of_le lt_n n_le_i\n    simp [n_le_i, Nat.mod_eq_of_lt, x_lt_two_i]\n  else\n    simp [n_le_i, toNat_ofNat]\n@[simp] theorem toInt_setWidth (x : BitVec w) :\n    (x.setWidth v).toInt = Int.bmod x.toNat (2^v) := by\n  simp [toInt_eq_toNat_bmod, toNat_setWidth, Int.emod_bmod]\n@[simp] theorem toFin_setWidth {x : BitVec w}",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/BitVec/Lemmas.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/BitVec/Lemmas.lean",
    "definition_name": "toNat_setWidth",
    "has_proof": true
  }
}