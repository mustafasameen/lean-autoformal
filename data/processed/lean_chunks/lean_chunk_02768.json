{
  "content": "val  : Nat\nstructure BitVec (w : Nat) where\n  ofFin ::\n  toFin : Fin (hPow 2 w)\ndef BitVec.decEq (x y : BitVec n) : Decidable (Eq x y) :=\n  match x, y with\n  | \u27e8n\u27e9, \u27e8m\u27e9 =>\n    dite (Eq n m)\n      (fun h => isTrue (h \u25b8 rfl))\n      (fun h => isFalse (fun h' => BitVec.noConfusion h' (fun h' => absurd h' h)))\ninstance : DecidableEq (BitVec n) := BitVec.decEq\nprotected def BitVec.toNat (x : BitVec n) : Nat := x.toFin.val\ninstance : LT (BitVec n) where lt := (LT.lt \u00b7.toNat \u00b7.toNat)\ninstance (x y : BitVec n) : Decidable (LT.lt x y) :=\n  inferInstanceAs (Decidable (LT.lt x.toNat y.toNat))\ninstance : LE (BitVec n) where le := (LE.le \u00b7.toNat \u00b7.toNat)\ninstance (x y : BitVec n) : Decidable (LE.le x y) :=\n  inferInstanceAs (Decidable (LE.le x.toNat y.toNat))\nstructure UInt8 where\n  ofBitVec ::\n  toBitVec : BitVec 8\nattribute [extern \"lean_uint8_of_nat_mk\"] UInt8.ofBitVec\nattribute [extern \"lean_uint8_to_nat\"] UInt8.toBitVec\n@[extern \"lean_uint8_of_nat\"]",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Prelude.lean",
    "definition_type": "instance",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Prelude.lean",
    "definition_name": "Nat",
    "has_proof": false
  }
}