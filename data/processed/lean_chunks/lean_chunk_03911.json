{
  "content": "(mapIdx_spec (p := fun _ _ _ => True) (hs := fun _ _ => trivial)).1\n@[simp] theorem getElem_mapIdx (f : Nat \u2192 \u03b1 \u2192 \u03b2) (xs : Array \u03b1) (i : Nat)\n    (h : i < (xs.mapIdx f).size) :\n    (xs.mapIdx f)[i] = f i (xs[i]'(by simp_all)) :=\n  (mapIdx_spec _ _ (fun i b h => b = f i xs[i]) fun _ _ => rfl).2 i (by simp_all)\n@[simp] theorem getElem?_mapIdx (f : Nat \u2192 \u03b1 \u2192 \u03b2) (xs : Array \u03b1) (i : Nat) :\n    (xs.mapIdx f)[i]? =\n      xs[i]?.map (f i) := by\n  simp [getElem?_def, size_mapIdx, getElem_mapIdx]\n@[simp] theorem toList_mapIdx (f : Nat \u2192 \u03b1 \u2192 \u03b2) (xs : Array \u03b1) :\n    (xs.mapIdx f).toList = xs.toList.mapIdx (fun i a => f i a) := by\n  apply List.ext_getElem <;> simp\nend Array\nnamespace List\n@[simp] theorem mapFinIdx_toArray (l : List \u03b1) (f : (i : Nat) \u2192 \u03b1 \u2192 (h : i < l.length) \u2192 \u03b2) :\n    l.toArray.mapFinIdx f = (l.mapFinIdx f).toArray := by\n  ext <;> simp\n@[simp] theorem mapIdx_toArray (f : Nat \u2192 \u03b1 \u2192 \u03b2) (l : List \u03b1) :\n    l.toArray.mapIdx f = (l.mapIdx f).toArray := by\n  ext <;> simp\nend List",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Array/MapIdx.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Array/MapIdx.lean",
    "definition_name": "mapIdx_induction",
    "has_proof": true
  }
}