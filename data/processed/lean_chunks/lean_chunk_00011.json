{
  "content": "def minN := 4\ndef out (s : String) (n : Nat) (t : UInt32) : IO Unit :=\n  IO.println s!\"{s} of depth {n}\\t check: {t}\"\npartial def sumT (d i t : UInt32) : UInt32 :=\n  if i = 0 then t\n  else\n    let a := check (make d)\n    sumT d (i-1) (t + a)\ndef main : List String \u2192 IO UInt32\n  | [s] => do\n    let n := s.toNat!\n    let maxN := Nat.max (minN + 2) n\n    let stretchN := maxN + 1\n    let c := check (make $ UInt32.ofNat stretchN)\n    out \"stretch tree\" stretchN c\n    let long := make $ UInt32.ofNat maxN\n    for d in [minN:maxN+1:2] do\n      let n := 2 ^ (maxN - d + minN)\n      let i := sumT (.ofNat d) (.ofNat n) 0\n      out s!\"{n}\\t trees\" d i\n    out \"long lived tree\" maxN (check long)\n    return 0\n  | _ => return 1",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/bench/binarytrees.st.lean",
    "definition_type": "def",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/bench/binarytrees.st.lean",
    "definition_name": "minN"
  }
}