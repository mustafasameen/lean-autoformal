{
  "content": "| node (SourceInfo.synthetic (endPos := pos) ..) .., false => some pos\n  | node _ _ args, _ =>\n    let rec loop (i : Nat) : Option String.Pos :=\n      match decide (LT.lt i args.size) with\n      | true => match getTailPos? (args.get!Internal ((args.size.sub i).sub 1)) canonicalOnly with\n         | some info => some info\n         | none      => loop (hAdd i 1)\n      | false => none\n    loop 0\n  | _, _ => none\nstructure SepArray (sep : String) where\n  elemsAndSeps : Array Syntax\n  elemsAndSeps : Array Syntax\nend Syntax\nunsafe def TSyntaxArray.rawImpl : TSyntaxArray ks \u2192 Array Syntax := unsafeCast\nunsafe def TSyntaxArray.mkImpl : Array Syntax \u2192 TSyntaxArray ks := unsafeCast\ndef SourceInfo.fromRef (ref : Syntax) (canonical := false) : SourceInfo :=\n  let noncanonical ref :=\n    match ref.getPos?, ref.getTailPos? with\n    | some pos, some tailPos => .synthetic pos tailPos\n    | _,        _            => .none\n  match canonical with\n  | true =>",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Prelude.lean",
    "definition_type": "instance",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Prelude.lean",
    "definition_name": "nonBacktrackable"
  }
}