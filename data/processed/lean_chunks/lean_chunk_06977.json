{
  "content": "theorem nonzeroMininum_map_le_nonzeroMinimum (f : \u03b1 \u2192 \u03b2) (p : \u03b1 \u2192 Nat) (q : \u03b2 \u2192 Nat) (xs : List \u03b1)\n    (h : \u2200 a, a \u2208 xs \u2192 (p a = 0 \u2194 q (f a) = 0))\n    (w : \u2200 a, a \u2208 xs \u2192 p a \u2260 0 \u2192 q (f a) \u2264 p a) :\n    ((xs.map f).map q).nonzeroMinimum \u2264 (xs.map p).nonzeroMinimum := by\n  rw [nonzeroMinimum_le_iff]\n  if z : (xs.map p).nonzeroMinimum = 0 then\n    rw [nonzeroMinimum_eq_zero_iff]\n    simp_all\n  else\n    have := nonzeroMinimum_eq_of_nonzero z\n    simp only [mem_map] at this\n    obtain \u27e8x, \u27e8a, m, rfl\u27e9, eq\u27e9 := this\n    refine .inr \u27e8q (f a), List.mem_map_of_mem _ (List.mem_map_of_mem _ m), ?_, ?_\u27e9\n    \u00b7 rw [eq] at z \u22a2\n      apply w _ m z\n    \u00b7 rwa [Ne, \u2190 h _ m, \u2190 eq]\ndef minNatAbs (xs : List Int) : Nat := xs.map Int.natAbs |>.nonzeroMinimum\n@[simp] theorem minNatAbs_eq_zero_iff {xs : List Int}",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Elab/Tactic/Omega/MinNatAbs.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Elab/Tactic/Omega/MinNatAbs.lean",
    "definition_name": "nonzeroMininum_map_le_nonzeroMinimum",
    "has_proof": true
  }
}