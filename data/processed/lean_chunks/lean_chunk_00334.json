{
  "content": "simp [bla, h, List.length_append] at *\nexample {\u03b1 : Type} (xs ys : List \u03b1) (h\u2081 : bla x = y) (h\u2082 : (xs ++ ys).length = y) : x = length xs := by\n  simp [bla, h, List.length_append, Nat.add_one] at *\nexample (h' : bla x = x) (_ : bla y = y) : x + x = x := by\n  simp [bla, h] at *\n  exact h'\nexample (h' : bla x = x) : bla x = x := by\n  simp [bla, h] at *\n  exact h'\nend\nclass HasProp (A) where\n  toProp : A \u2192 Prop\ninstance : HasProp Nat where\n  toProp _ := True\nexample : HasProp.toProp 0 := by\n  simp [HasProp.toProp]\nexample (P Q : Prop) (h : P \u2194 Q) (p : P) : Q := by\n  simp [\u2190 h]\n  exact p\ntheorem my_thm' : a \u2194 a \u2227 a := my_thm.symm\nexample (P : Prop) : P \u2227 P \u2194 P := by simp only [\u2190 my_thm']\nexample {P : Prop} : P \u2192 P := by intro h",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/lean/simp_trace.lean",
    "definition_type": "def",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/lean/simp_trace.lean",
    "definition_name": "foo",
    "has_proof": true
  }
}