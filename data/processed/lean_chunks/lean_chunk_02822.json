{
  "content": "x r\nnamespace ReaderT\nsection\nvariable {\u03c1 : Type u} {m : Type u \u2192 Type v} {\u03b1 : Type u}\ninstance  : MonadLift m (ReaderT \u03c1 m) where\n  monadLift x := fun _ => x\n@[always_inline]\ninstance (\u03b5) [MonadExceptOf \u03b5 m] : MonadExceptOf \u03b5 (ReaderT \u03c1 m) where\n  throw e  := liftM (m := m) (throw e)\n  tryCatch := fun x c r => tryCatchThe \u03b5 (x r) (fun e => (c e) r)\nend\nsection\nvariable {\u03c1 : Type u} {m : Type u \u2192 Type v}\n@[always_inline, inline]\nprotected def pure [Monad m] {\u03b1} (a : \u03b1) : ReaderT \u03c1 m \u03b1 :=\n  fun _ => pure a\n@[always_inline, inline]\nprotected def adapt {\u03c1' \u03b1 : Type u} (f : \u03c1' \u2192 \u03c1) : ReaderT \u03c1 m \u03b1 \u2192 ReaderT \u03c1' m \u03b1 :=\n  fun x r => x (f r)\nend\nend ReaderT\nclass MonadReaderOf (\u03c1 : semiOutParam (Type u)) (m : Type u \u2192 Type v) where\n@[always_inline, inline]\ndef readThe (\u03c1 : Type u) {m : Type u \u2192 Type v} [MonadReaderOf \u03c1 m] : m \u03c1 :=\n  MonadReaderOf.read\n  read : m \u03c1\nexport MonadReader (read)\ninstance (\u03c1 : Type u) (m : Type u \u2192 Type v) [MonadReaderOf \u03c1 m] : MonadReader \u03c1 m where",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Prelude.lean",
    "definition_type": "def",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Prelude.lean",
    "definition_name": "NonemptyType",
    "has_proof": true
  }
}