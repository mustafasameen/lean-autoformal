{
  "content": "inductive with \u27e8_, h1, h2\u27e9\n  have fc_incompatible_confirmRupHint_fold_res := (h2 confirmRupHint_success)\n  rw [Incompatible.symm] at fc_incompatible_confirmRupHint_fold_res\n  have fc_unsat :=\n    unsat_of_limplies_and_incompatible (PosFin n) fc.1 confirmRupHint_fold_res.1 h1 fc_incompatible_confirmRupHint_fold_res p\n  by_cases pc : p \u22a8 c\n  \u00b7 exact pc\n\u00b7 exfalso\n    simp only [(\u00b7 \u22a8 \u00b7), Clause.eval, List.any_eq_true, Prod.exists, Bool.exists_bool, not_exists,\n      not_or, not_and, Bool.not_eq_true] at pc\n    simp only [formulaEntails_def, List.all_eq_true, decide_eq_true_eq, Classical.not_forall,\n      not_imp] at fc_unsat\n    rcases fc_unsat with \u27e8unsat_c, unsat_c_in_fc, p_unsat_c\u27e9\n    have unsat_c_in_fc := mem_of_insertRatUnits f (negate c) unsat_c unsat_c_in_fc\n    simp only [List.mem_map, Prod.exists, Bool.exists_bool] at unsat_c_in_fc\n    rcases unsat_c_in_fc with \u27e8v, \u27e8v_in_neg_c, unsat_c_eq\u27e9 | \u27e8v_in_neg_c, unsat_c_eq\u27e9\u27e9 | unsat_c_in_f",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RatAddSound.lean",
    "definition_type": "inductive",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RatAddSound.lean",
    "definition_name": "with",
    "has_proof": true
  }
}