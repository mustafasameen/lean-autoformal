{
  "content": "induction l\u2081 generalizing l\u2082 with\n  | nil =>\n    cases l\u2082 with\n    | nil => simp [lex]\n    | cons b bs => simp [lex]\n  | cons a l\u2081 ih =>\n    cases l\u2082 with\n    | nil => simp [lex]\n    | cons b l\u2082 =>\n      simp [cons_lex_cons, Bool.or_eq_false_iff, Bool.and_eq_false_imp, ih, isEqv,\n        Bool.and_eq_true, length_cons]\n      constructor\n      \u00b7 rintro \u27e8hab, h\u27e9\n        if eq : b == a then\n          specialize h (BEq.symm eq)\n          obtain (h | \u27e8i, h\u2081, h\u2082, w\u2081, w\u2082\u27e9) := h\n          \u00b7 exact .inl \u27e8eq, h\u27e9\n          \u00b7 refine .inr \u27e8i + 1, by simpa using h\u2081, by simpa using h\u2082, ?_, ?_\u27e9\n            \u00b7 intro j hj\n              cases j with\n              | zero => simpa using BEq.symm eq\n              | succ j =>\n                simp only [getElem_cons_succ]\n                rw [w\u2081]\n                simpa using hj\n            \u00b7 simpa using w\u2082\n        else\n          right\n          have hba : lt b a :=\n            Decidable.byContradiction fun hba => eq (lt_antisymm _ _ (by simpa using hba) hab)",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/List/Lex.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/List/Lex.lean",
    "definition_name": "lex_eq_true_iff_lex",
    "has_proof": true
  }
}