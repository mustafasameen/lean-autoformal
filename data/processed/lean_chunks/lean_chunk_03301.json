{
  "content": "| single =>\n    simp [insert]\n    split\n    . rfl\n    . simp [evalList, h.1, EvalInformation.evalOp]\n  | step y z zs ih =>\n    simp [insert] at *; split\n    next => rfl\n    next =>\n      split\n      next => simp [evalList, EvalInformation.evalOp]; rw [h.1, ctx.assoc.1, h.1 (evalList _ _ _)]\n      next => simp_all [evalList, EvalInformation.evalOp]; rw [h.1, ctx.assoc.1, h.1 (evalList _ _ _)]\ntheorem Context.evalList_sort_congr\n  (ctx : Context \u03b1)\n  (h : Commutative ctx.op)\n  (h\u2082 : evalList \u03b1 ctx a = evalList \u03b1 ctx b)\n  (h\u2083 : a \u2260 [])\n  (h\u2084 : b \u2260 [])\n  : evalList \u03b1 ctx (sort.loop a c) = evalList \u03b1 ctx (sort.loop b c) := by\n  induction c generalizing a b with\n  | nil => simp [sort.loop, h\u2082]\n  | cons c _  ih =>\n    simp [sort.loop]; apply ih; simp [evalList_insert ctx h, evalList]\n    cases a with\n    | nil => apply absurd h\u2083; simp\n    | cons a as =>\n      cases b with\n      | nil => apply absurd h\u2084; simp\n      | cons b bs => simp [evalList, h\u2082]\n    all_goals apply insert_nonEmpty",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/AC.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/AC.lean",
    "definition_name": "Context",
    "has_proof": true
  }
}