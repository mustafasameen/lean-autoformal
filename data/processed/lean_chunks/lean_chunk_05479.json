{
  "content": "theorem Iterator.sizeOf_eq (i : String.Iterator) : sizeOf i = i.1.utf8ByteSize - i.2.byteIdx :=\n  rfl\nnamespace Iterator\n@[inline, inherit_doc Iterator.s]\ndef toString := Iterator.s\n@[inline] def curr : Iterator \u2192 Char\n  | \u27e8s, i\u27e9 => get s i\n@[inline] def next : Iterator \u2192 Iterator\n  | \u27e8s, i\u27e9 => \u27e8s, s.next i\u27e9\n@[inline] def prev : Iterator \u2192 Iterator\n  | \u27e8s, i\u27e9 => \u27e8s, s.prev i\u27e9\n@[inline] def hasNext : Iterator \u2192 Bool\n  | \u27e8s, i\u27e9 => i.byteIdx < s.endPos.byteIdx\n@[inline] def setCurr : Iterator \u2192 Char \u2192 Iterator\n  | \u27e8s, i\u27e9, c => \u27e8s.set i c, i\u27e9\n@[inline] def toEnd : Iterator \u2192 Iterator\n  | \u27e8s, _\u27e9 => \u27e8s, s.endPos\u27e9\n@[inline] def extract : Iterator \u2192 Iterator \u2192 String\n  | \u27e8s\u2081, b\u27e9, \u27e8s\u2082, e\u27e9 =>\n    if s\u2081 \u2260 s\u2082 || b > e then \"\"\n    else s\u2081.extract b e\ndef forward : Iterator \u2192 Nat \u2192 Iterator\n  | it, 0   => it\n  | it, n+1 => forward it.next n\ndef prevn : Iterator \u2192 Nat \u2192 Iterator\n  | it, 0   => it\n  | it, i+1 => prevn it.prev i\nend Iterator",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/String/Basic.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/String/Basic.lean",
    "definition_name": "Iterator",
    "has_proof": true
  }
}