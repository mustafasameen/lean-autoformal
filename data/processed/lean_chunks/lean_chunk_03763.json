{
  "content": "(flatten xss).foldl f b = xss.foldl (fun b xs => xs.foldl f b) b := by\n  cases xss using array\u2082_induction\n  simp [List.foldl_flatten, List.foldl_map]\ntheorem foldr_flatten (f : \u03b1 \u2192 \u03b2 \u2192 \u03b2) (b : \u03b2) (xss : Array (Array \u03b1)) :\n    (flatten xss).foldr f b = xss.foldr (fun xs b => xs.foldr f b) b := by\n  cases xss using array\u2082_induction\n  simp [List.foldr_flatten, List.foldr_map]\n@[simp] theorem foldr_reverse' (xs : Array \u03b1) (f : \u03b1 \u2192 \u03b2 \u2192 \u03b2) (b) (w : start = xs.size) :\n    xs.reverse.foldr f b start 0 = xs.foldl (fun x y => f y x) b := by\n  simp [w, foldl_eq_foldlM, foldr_eq_foldrM]\ntheorem foldl_reverse (xs : Array \u03b1) (f : \u03b2 \u2192 \u03b1 \u2192 \u03b2) (b) :\n    xs.reverse.foldl f b = xs.foldr (fun x y => f y x) b := by simp [foldl_eq_foldlM, foldr_eq_foldrM]\ntheorem foldr_reverse (xs : Array \u03b1) (f : \u03b1 \u2192 \u03b2 \u2192 \u03b2) (b) :\n    xs.reverse.foldr f b = xs.foldl (fun x y => f y x) b :=\n  (foldl_reverse ..).symm.trans <| by simp\ntheorem foldl_eq_foldr_reverse (xs : Array \u03b1) (f : \u03b2 \u2192 \u03b1 \u2192 \u03b2) (b) :",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Array/Lemmas.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Array/Lemmas.lean",
    "definition_name": "foldr_append",
    "has_proof": true
  }
}