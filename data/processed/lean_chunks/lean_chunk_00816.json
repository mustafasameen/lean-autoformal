{
  "content": "theorem Context.left_comm (ctx : Context \u03b1) (a b c : \u03b1) : ctx.op a (ctx.op b c) = ctx.op b (ctx.op a c) := by\n  rw [\u2190 ctx.assoc, ctx.comm a b, ctx.assoc]\ndef Expr.denote (ctx : Context \u03b1) : Expr \u2192 \u03b1\n  | Expr.op a b => ctx.op (denote ctx a) (denote ctx b)\n  | Expr.var i  => ctx.vars.getIdx i ctx.someVal\ntheorem Expr.denote_op (ctx : Context \u03b1) (a b : Expr) : denote ctx (Expr.op a b) = ctx.op (denote ctx a) (denote ctx b) :=\n  rfl\ndef Expr.concat : Expr \u2192 Expr \u2192 Expr\n  | Expr.op a b, c => Expr.op a (concat b c)\n  | Expr.var i, c  => Expr.op (Expr.var i) c\ntheorem Expr.denote_concat (ctx : Context \u03b1) (a b : Expr) : denote ctx (concat a b) = denote ctx (Expr.op a b) := by\n  induction a with\n  | var i => rfl\n  | op _ _ _ ih => simp [denote, concat, ih, ctx.assoc]\ndef Expr.flat : Expr \u2192 Expr\n  | Expr.op a b => concat (flat a) (flat b)\n  | Expr.var i  => Expr.var i\ntheorem Expr.denote_flat (ctx : Context \u03b1) (e : Expr) : denote ctx (flat e) = denote ctx e := by\n  induction e with",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/lean/run/ac_expr.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/lean/run/ac_expr.lean",
    "definition_name": "Context",
    "has_proof": true
  }
}