{
  "content": "theorem findSomeM?_toArray [Monad m] [LawfulMonad m] (f : \u03b1 \u2192 m (Option \u03b2)) (l : List \u03b1) :\n    l.toArray.findSomeM? f = l.findSomeM? f := by\n  rw [Array.findSomeM?]\n  simp only [bind_pure_comp, map_pure, forIn_toArray]\n  induction l with\n  | nil => simp\n  | cons a l ih =>\n    simp only [forIn_cons, LawfulMonad.bind_assoc, findSomeM?]\n    congr\n    ext1 (_|_) <;> simp [ih]\ntheorem findSomeRevM?_find_toArray [Monad m] [LawfulMonad m] (f : \u03b1 \u2192 m (Option \u03b2)) (l : List \u03b1)\n    (i : Nat) (h) :\n    findSomeRevM?.find f l.toArray i h = (l.take i).reverse.findSomeM? f := by\n  induction i generalizing l with\n  | zero => simp [Array.findSomeRevM?.find.eq_def]\n  | succ i ih =>\n    rw [size_toArray] at h\n    rw [Array.findSomeRevM?.find, take_succ, getElem?_eq_getElem (by omega)]\n    simp only [ih, reverse_append]\n    congr\n    ext1 (_|_) <;> simp\ntheorem findSomeRevM?_toArray [Monad m] [LawfulMonad m] (f : \u03b1 \u2192 m (Option \u03b2)) (l : List \u03b1) :\n    l.toArray.findSomeRevM? f = l.reverse.findSomeM? f := by",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/List/ToArray.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/List/ToArray.lean",
    "definition_name": "findSomeM",
    "has_proof": true
  }
}