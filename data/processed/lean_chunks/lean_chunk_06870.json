{
  "content": "return thm\ndef mkEMatchEqTheoremsForDef? (declName : Name) : MetaM (Option (Array EMatchTheorem)) := do\n  let some eqns \u2190 getEqnsFor? declName | return none\n  eqns.mapM fun eqn => do\n    mkEMatchEqTheorem eqn (normalizePattern := true)\nprivate def addGrindEqAttr (declName : Name) (attrKind : AttributeKind) (thmKind : EMatchTheoremKind) (useLhs := true) : MetaM Unit := do\n  if (\u2190 getConstInfo declName).isTheorem then\n    ematchTheoremsExt.add (\u2190 mkEMatchEqTheorem declName (normalizePattern := true) (useLhs := useLhs)) attrKind\n  else if let some thms \u2190 mkEMatchEqTheoremsForDef? declName then\n    unless useLhs do\n      throwError \"`{declName}` is a definition, you must only use the left-hand side for extracting patterns\"\n    thms.forM (ematchTheoremsExt.add \u00b7 attrKind)\n  else\n    throwError s!\"`{thmKind.toAttribute}` attribute can only be applied to equational theorems or function definitions\"",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Meta/Tactic/Grind/EMatchTheorem.lean",
    "definition_type": "def",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Meta/Tactic/Grind/EMatchTheorem.lean",
    "definition_name": "forbiddenDeclNames",
    "has_proof": true
  }
}