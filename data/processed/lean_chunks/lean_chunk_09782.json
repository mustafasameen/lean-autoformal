{
  "content": "(\u2200 {m'' a b}, P m'' \u2192 P (m''.insert a b)) \u2192 P m \u2192 P m' } := Id.run do\n  let mut r : { m' : Raw\u2080 \u03b1 (fun _ => \u03b2) // \u2200 (P : Raw\u2080 \u03b1 (fun _ => \u03b2) \u2192 Prop),\n    (\u2200 {m'' a b}, P m'' \u2192 P (m''.insert a b)) \u2192 P m \u2192 P m' } := \u27e8m, fun _ _ => id\u27e9\n  for (a, b) in l do\n    r := \u27e8r.1.insert a b, fun _ h hm => h (r.2 _ h hm)\u27e9\n  return r\n@[inline] def getKey? [BEq \u03b1] [Hashable \u03b1] (m : Raw\u2080 \u03b1 \u03b2) (a : \u03b1) : Option \u03b1 :=\n  let \u27e8\u27e8_, buckets\u27e9, h\u27e9 := m\n  let \u27e8i, h\u27e9 := mkIdx buckets.size h (hash a)\n  buckets[i].getKey? a\n@[inline] def getKeyD [BEq \u03b1] [Hashable \u03b1] (m : Raw\u2080 \u03b1 \u03b2) (a : \u03b1) (fallback : \u03b1) : \u03b1 :=\n  let \u27e8\u27e8_, buckets\u27e9, h\u27e9 := m\n  let idx := mkIdx buckets.size h (hash a)\n  buckets[idx.1].getKeyD a fallback\nstructure List.HashesTo [BEq \u03b1] [Hashable \u03b1] (l : List ((a : \u03b1) \u00d7 \u03b2 a)) (i : Nat)\n    (size : Nat) : Prop where\nstructure IsHashSelf [BEq \u03b1] [Hashable \u03b1] (m : Array (AssocList \u03b1 \u03b2)) : Prop where\nstructure WFImp [BEq \u03b1] [Hashable \u03b1] (m : Raw \u03b1 \u03b2) : Prop where",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Std/Data/DHashMap/Internal/Defs.lean",
    "definition_type": "def",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Std/Data/DHashMap/Internal/Defs.lean",
    "definition_name": "empty"
  }
}