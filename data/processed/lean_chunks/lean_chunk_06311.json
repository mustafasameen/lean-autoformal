{
  "content": "structure S : Type extends P' rather than 'structure S extends P : Type'.\\n\\n\\\n        The purpose of this change is to accommodate 'structure S extends toP : P' syntax for naming parent projections.\"\n      pure (stx[4][0][2], stx[4])\n    else\n      if !stx[4].isNone && !stx[4][0][2].isNone then\n        logErrorAt stx[4][0][2][0] \"\\\n          Unexpected additional resulting type. \\\n          The syntax is now 'structure S : Type extends P' rather than 'structure S extends P : Type'.\\n\\n\\\n          The purpose of this change is to accommodate 'structure S extends toP : P' syntax for naming parent projections.\"\n      pure (stx[3], stx[4])\n  let parents   \u2190 expandParents exts\n  let derivingClasses \u2190 getOptDerivingClasses stx[6]\n  let type?     := if optType.isNone then none else some optType[0][1]\n  let ctor \u2190 expandCtor stx modifiers declName\n  let fields \u2190 expandFields stx modifiers declName\n  fields.forM fun field => do\n    if field.declName == ctor.declName then",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Elab/Structure.lean",
    "definition_type": "structure",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Lean/Elab/Structure.lean",
    "definition_name": "S"
  }
}