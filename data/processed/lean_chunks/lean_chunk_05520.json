{
  "content": "theorem count_le_size (a : \u03b1) (xs : Vector \u03b1 n) : count a xs \u2264 n := countP_le_size _\ntheorem count_le_count_push (a b : \u03b1) (xs : Vector \u03b1 n) : count a xs \u2264 count a (xs.push b) := by\n  rcases xs with \u27e8xs, rfl\u27e9\n  simp [Array.count_push]\n@[simp] theorem count_singleton (a b : \u03b1) : count a #v[b] = if b == a then 1 else 0 := by\n  simp [count_eq_countP]\n@[simp] theorem count_append (a : \u03b1) (xs : Vector \u03b1 n) (ys : Vector \u03b1 m) :\n    count a (xs ++ ys) = count a xs + count a ys :=\n  countP_append ..\nset_option linter.listVariables false in\n@[simp] theorem count_flatten (a : \u03b1) (xss : Vector (Vector \u03b1 m) n) :\n    count a xss.flatten = (xss.map (count a)).sum := by\n  rcases xss with \u27e8xss, rfl\u27e9\n  simp [Array.count_flatten, Function.comp_def]\n@[simp] theorem count_reverse (a : \u03b1) (xs : Vector \u03b1 n) : count a xs.reverse = count a xs := by\n  rcases xs with \u27e8xs, rfl\u27e9\n  simp\ntheorem boole_getElem_le_count (a : \u03b1) (xs : Vector \u03b1 n) (i : Nat) (h : i < n) :",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Vector/Count.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Vector/Count.lean",
    "definition_name": "count_le_size",
    "has_proof": true
  }
}