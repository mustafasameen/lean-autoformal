{
  "content": "@[inline]\ndef balance2 : Tree \u2192 Nat \u2192 Bool \u2192 Tree \u2192 Tree\n  | t, kv, vv, .node _ (.node .red l kx\u2081 vx\u2081 r\u2081) ky vy r\u2082  => .node .red (.node .black t kv vv l) kx\u2081 vx\u2081 (.node .black r\u2081 ky vy r\u2082)\n  | t, kv, vv, .node _ l\u2081 ky vy (.node .red l\u2082 kx\u2082 vx\u2082 r\u2082) => .node .red (.node .black t kv vv l\u2081) ky vy (.node .black l\u2082 kx\u2082 vx\u2082 r\u2082)\n  | t, kv, vv, .node _ l ky vy r                           => .node .black t kv vv (.node .red l ky vy r)\n  | _, _,  _,  _                                           => .leaf\ndef isRed : Tree \u2192 Bool\n  | .node .red .. => true\n  | _             => false\ndef ins (kx : Nat) (vx : Bool) : Tree \u2192 Tree\n  | .leaf => .node .red .leaf kx vx .leaf\n  | .node .red a ky vy b =>\n    (if kx < ky then .node .red (ins kx vx a) ky vy b\n     else if kx = ky then .node .red a kx vx b\n     else .node .red a ky vy (ins kx vx b))\n  | .node .black a ky vy b =>\n      if kx < ky then\n        (if isRed a then balance1 ky vy b (ins kx vx a)\n         else .node .black (ins kx vx a) ky vy b)",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/bench/rbmap_checkpoint.lean",
    "definition_type": "inductive",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/bench/rbmap_checkpoint.lean",
    "definition_name": "Color"
  }
}