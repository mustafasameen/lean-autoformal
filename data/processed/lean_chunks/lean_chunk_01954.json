{
  "content": "theorem map_zero (f : M \u2192+ N) : f 0 = 0 := by\n  have := calc f 0 + f 0\n            = f (0 + 0) := by rw [f.map_add']\n          _ = 0 + f 0 := by rw [zero_add, zero_add]\n  exact add_right_cancel this\ntheorem map_neg (f : M \u2192+ N) (m : M) : f (-m) = - (f m) := by\n  apply eq_neg_of_add_eq_zero_left\n  rw [\u2190 f.map_add']\n  simp only [neg_add_cancel, f.map_zero]\nend\nend AddMonoidHom\nend Mathlib.Algebra.Group.Hom.Defs\nsection Mathlib.Algebra.Group.Action.Defs\nclass MulOneClass (M : Type u) extends Mul M, One M where\nclass MulAction (\u03b1 : Type u) (\u03b2 : Type v) [MulOneClass \u03b1] extends SMul \u03b1 \u03b2 where\n  protected one_smul : \u2200 b : \u03b2, (1 : \u03b1) \u2022 b = b\n  mul_smul : \u2200 (x y : \u03b1) (b : \u03b2), (x * y) \u2022 b = x \u2022 y \u2022 b\nend Mathlib.Algebra.Group.Action.Defs\nsection Mathlib.Algebra.GroupWithZero.Action.Defs\nclass DistribMulAction (M : Type u) (A : Type v) [MulOneClass M] [AddMonoid A] extends MulAction M A where\n  smul_zero : \u2200 a : M, a \u2022 (0 : A) = 0\n  smul_add : \u2200 (a : M) (x y : A), a \u2022 (x + y) = a \u2022 x + a \u2022 y",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/lean/run/linearCategory_perf_issue.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/tests/lean/run/linearCategory_perf_issue.lean",
    "definition_name": "map_zero",
    "has_proof": true
  }
}