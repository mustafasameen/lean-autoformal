{
  "content": "(sublist_cons_self _ _).count_le _\ntheorem count_singleton (a b : \u03b1) : count a [b] = if b == a then 1 else 0 := by\n  simp [count_cons]\n@[simp] theorem count_append (a : \u03b1) : \u2200 l\u2081 l\u2082, count a (l\u2081 ++ l\u2082) = count a l\u2081 + count a l\u2082 :=\n  countP_append _\ntheorem count_flatten (a : \u03b1) (l : List (List \u03b1)) : count a l.flatten = (l.map (count a)).sum := by\n  simp only [count_eq_countP, countP_flatten, count_eq_countP']\n@[deprecated count_flatten (since := \"2024-10-14\")] abbrev count_join := @count_flatten\n@[simp] theorem count_reverse (a : \u03b1) (l : List \u03b1) : count a l.reverse = count a l := by\n  simp only [count_eq_countP, countP_eq_length_filter, filter_reverse, length_reverse]\ntheorem boole_getElem_le_count (a : \u03b1) (l : List \u03b1) (i : Nat) (h : i < l.length) :\n    (if l[i] == a then 1 else 0) \u2264 l.count a := by\n  rw [count_eq_countP]\n  apply boole_getElem_le_countP (\u00b7 == a)\nvariable [LawfulBEq \u03b1]\n@[simp] theorem count_cons_self (a : \u03b1) (l : List \u03b1) : count a (a :: l) = count a l + 1 := by",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/List/Count.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/List/Count.lean",
    "definition_name": "count_tail",
    "has_proof": true
  }
}