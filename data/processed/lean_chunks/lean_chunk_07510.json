{
  "content": "else\n    .error it unexpectedEndOfInput\n@[inline]\ndef satisfy (p : elem \u2192 Bool) : Parsec \u03b9 elem := attempt do\n  let c \u2190 any\n  if p c then return c else fail \"condition not satisfied\"\n@[inline]\ndef notFollowedBy (p : Parsec \u03b9 \u03b1) : Parsec \u03b9 Unit := fun it =>\n  match p it with\n  | .success _ _ => .error it \"\"\n  | .error _ _ => .success it ()\n@[inline]\ndef peek? : Parsec \u03b9 (Option elem) := fun it =>\n  if h : Input.hasNext it then\n    .success it (Input.curr' it h)\n  else\n    .success it none\n@[inline]\ndef peek! : Parsec \u03b9 elem := fun it =>\n  if h : Input.hasNext it then\n    .success it (Input.curr' it h)\n  else\n    .error it unexpectedEndOfInput\n@[inline]\ndef peekD (default : elem) : Parsec \u03b9 elem := fun it =>\n  if h : Input.hasNext it then\n    .success it (Input.curr' it h)\n  else\n    .success it default\n@[inline]\ndef skip : Parsec \u03b9 Unit := fun it =>\n  if h : Input.hasNext it then\n    .success (Input.next' it h) ()\n  else\n    .error it unexpectedEndOfInput\n@[specialize]",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Std/Internal/Parsec/Basic.lean",
    "definition_type": "def",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Std/Internal/Parsec/Basic.lean",
    "definition_name": "expectedEndOfInput"
  }
}