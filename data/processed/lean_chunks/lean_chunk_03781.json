{
  "content": "theorem toList_zipWith (f : \u03b1 \u2192 \u03b2 \u2192 \u03b3) (xs : Array \u03b1) (ys : Array \u03b2) :\n    (zipWith f xs ys).toList = List.zipWith f xs.toList ys.toList := by\n  cases xs\n  cases ys\n  simp\n@[simp] theorem toList_zip (xs : Array \u03b1) (ys : Array \u03b2) :\n    (zip xs ys).toList = List.zip xs.toList ys.toList := by\n  simp [zip, toList_zipWith, List.zip]\n@[simp] theorem toList_zipWithAll (f : Option \u03b1 \u2192 Option \u03b2 \u2192 \u03b3) (xs : Array \u03b1) (ys : Array \u03b2) :\n    (zipWithAll f xs ys).toList = List.zipWithAll f xs.toList ys.toList := by\n  cases xs\n  cases ys\n  simp\n@[simp] theorem size_zipWith (xs : Array \u03b1) (ys : Array \u03b2) (f : \u03b1 \u2192 \u03b2 \u2192 \u03b3) :\n    (zipWith f xs ys).size = min xs.size ys.size := by\n  rw [size_eq_length_toList, toList_zipWith, List.length_zipWith]\n@[simp] theorem size_zip (xs : Array \u03b1) (ys : Array \u03b2) :\n    (zip xs ys).size = min xs.size ys.size :=\n  xs.size_zipWith ys Prod.mk\n@[simp] theorem getElem_zipWith (xs : Array \u03b1) (ys : Array \u03b2) (f : \u03b1 \u2192 \u03b2 \u2192 \u03b3) (i : Nat)\n    (hi : i < (zipWith f xs ys).size) :",
  "metadata": {
    "source": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Array/Lemmas.lean",
    "definition_type": "theorem",
    "parent_file": "/Users/mustafasameen/Documents/lean-autoformal/data/raw/lean4/src/Init/Data/Array/Lemmas.lean",
    "definition_name": "toList_zipWith",
    "has_proof": true
  }
}